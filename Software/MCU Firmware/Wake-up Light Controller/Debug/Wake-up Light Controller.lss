
Wake-up Light Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800100  0000168e  00001722  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000168e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  0080026c  0080026c  0000188e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000188e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001900  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002736  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000beb  00000000  00000000  00004236  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f0  00000000  00000000  00004e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  00006314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e6  00000000  00000000  00006908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a6a  00000000  00000000  000071ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00008c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__vector_2>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_5>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__vector_13>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__vector_18>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__vector_21>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	df 06       	cpc	r13, r31
      6a:	e9 06       	cpc	r14, r25
      6c:	ee 06       	cpc	r14, r30
      6e:	f7 06       	cpc	r15, r23
      70:	00 07       	cpc	r16, r16
      72:	09 07       	cpc	r16, r25
      74:	12 07       	cpc	r17, r18
      76:	07 63       	ori	r16, 0x37	; 55
      78:	42 36       	cpi	r20, 0x62	; 98
      7a:	b7 9b       	sbis	0x16, 7	; 22
      7c:	d8 a7       	std	Y+40, r29	; 0x28
      7e:	1a 39       	cpi	r17, 0x9A	; 154
      80:	68 56       	subi	r22, 0x68	; 104
      82:	18 ae       	std	Y+56, r1	; 0x38
      84:	ba ab       	std	Y+50, r27	; 0x32
      86:	55 8c       	ldd	r5, Z+29	; 0x1d
      88:	1d 3c       	cpi	r17, 0xCD	; 205
      8a:	b7 cc       	rjmp	.-1682   	; 0xfffff9fa <__eeprom_end+0xff7ef9fa>
      8c:	57 63       	ori	r21, 0x37	; 55
      8e:	bd 6d       	ori	r27, 0xDD	; 221
      90:	ed fd       	.word	0xfded	; ????
      92:	75 3e       	cpi	r23, 0xE5	; 229
      94:	f6 17       	cp	r31, r22
      96:	72 31       	cpi	r23, 0x12	; 18
      98:	bf 00       	.word	0x00bf	; ????
      9a:	00 00       	nop
      9c:	80 3f       	cpi	r24, 0xF0	; 240
      9e:	08 00       	.word	0x0008	; ????
      a0:	00 00       	nop
      a2:	be 92       	st	-X, r11
      a4:	24 49       	sbci	r18, 0x94	; 148
      a6:	12 3e       	cpi	r17, 0xE2	; 226
      a8:	ab aa       	std	Y+51, r10	; 0x33
      aa:	aa 2a       	or	r10, r26
      ac:	be cd       	rjmp	.-1156   	; 0xfffffc2a <__eeprom_end+0xff7efc2a>
      ae:	cc cc       	rjmp	.-1640   	; 0xfffffa48 <__eeprom_end+0xff7efa48>
      b0:	4c 3e       	cpi	r20, 0xEC	; 236
      b2:	00 00       	nop
      b4:	00 80       	ld	r0, Z
      b6:	be ab       	std	Y+54, r27	; 0x36
      b8:	aa aa       	std	Y+50, r10	; 0x32
      ba:	aa 3e       	cpi	r26, 0xEA	; 234
      bc:	00 00       	nop
      be:	00 00       	nop
      c0:	bf 00       	.word	0x00bf	; ????
      c2:	00 00       	nop
      c4:	80 3f       	cpi	r24, 0xF0	; 240
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	00 08       	sbc	r0, r0
      cc:	41 78       	andi	r20, 0x81	; 129
      ce:	d3 bb       	out	0x13, r29	; 19
      d0:	43 87       	std	Z+11, r20	; 0x0b
      d2:	d1 13       	cpse	r29, r17
      d4:	3d 19       	sub	r19, r13
      d6:	0e 3c       	cpi	r16, 0xCE	; 206
      d8:	c3 bd       	out	0x23, r28	; 35
      da:	42 82       	std	Z+2, r4	; 0x02
      dc:	ad 2b       	or	r26, r29
      de:	3e 68       	ori	r19, 0x8E	; 142
      e0:	ec 82       	std	Y+4, r14	; 0x04
      e2:	76 be       	out	0x36, r7	; 54
      e4:	d9 8f       	std	Y+25, r29	; 0x19
      e6:	e1 a9       	ldd	r30, Z+49	; 0x31
      e8:	3e 4c       	sbci	r19, 0xCE	; 206
      ea:	80 ef       	ldi	r24, 0xF0	; 240
      ec:	ff be       	out	0x3f, r15	; 63
      ee:	01 c4       	rjmp	.+2050   	; 0x8f2 <update_state_machine+0x44>
      f0:	ff 7f       	andi	r31, 0xFF	; 255
      f2:	3f 00       	.word	0x003f	; ????
      f4:	00 00       	nop
	...

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d8 e0       	ldi	r29, 0x08	; 8
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
     104:	12 e0       	ldi	r17, 0x02	; 2
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b1 e0       	ldi	r27, 0x01	; 1
     10a:	ee e8       	ldi	r30, 0x8E	; 142
     10c:	f6 e1       	ldi	r31, 0x16	; 22
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
     110:	05 90       	lpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	ac 36       	cpi	r26, 0x6C	; 108
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
     11a:	22 e0       	ldi	r18, 0x02	; 2
     11c:	ac e6       	ldi	r26, 0x6C	; 108
     11e:	b2 e0       	ldi	r27, 0x02	; 2
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a7 3a       	cpi	r26, 0xA7	; 167
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <main>
     12e:	0c 94 45 0b 	jmp	0x168a	; 0x168a <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <i2c_init>:
     136:	88 e4       	ldi	r24, 0x48	; 72
     138:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     13c:	08 95       	ret

0000013e <i2c_start>:
     13e:	ec eb       	ldi	r30, 0xBC	; 188
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	10 82       	st	Z, r1
     144:	94 ea       	ldi	r25, 0xA4	; 164
     146:	90 83       	st	Z, r25
     148:	90 81       	ld	r25, Z
     14a:	99 23       	and	r25, r25
     14c:	ec f7       	brge	.-6      	; 0x148 <i2c_start+0xa>
     14e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     152:	98 7f       	andi	r25, 0xF8	; 248
     154:	98 30       	cpi	r25, 0x08	; 8
     156:	a1 f4       	brne	.+40     	; 0x180 <i2c_start+0x42>
     158:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     15c:	84 e8       	ldi	r24, 0x84	; 132
     15e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     162:	ec eb       	ldi	r30, 0xBC	; 188
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	88 23       	and	r24, r24
     16a:	ec f7       	brge	.-6      	; 0x166 <i2c_start+0x28>
     16c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     170:	98 7f       	andi	r25, 0xF8	; 248
     172:	98 31       	cpi	r25, 0x18	; 24
     174:	39 f0       	breq	.+14     	; 0x184 <i2c_start+0x46>
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	90 34       	cpi	r25, 0x40	; 64
     17a:	29 f4       	brne	.+10     	; 0x186 <i2c_start+0x48>
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	08 95       	ret
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	08 95       	ret
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	08 95       	ret

00000188 <i2c_write>:
     188:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     18c:	84 e8       	ldi	r24, 0x84	; 132
     18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     192:	ec eb       	ldi	r30, 0xBC	; 188
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	88 23       	and	r24, r24
     19a:	ec f7       	brge	.-6      	; 0x196 <i2c_write+0xe>
     19c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1a0:	98 7f       	andi	r25, 0xF8	; 248
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	98 32       	cpi	r25, 0x28	; 40
     1a6:	09 f4       	brne	.+2      	; 0x1aa <i2c_write+0x22>
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	08 95       	ret

000001ac <i2c_read_ack>:
     1ac:	84 ec       	ldi	r24, 0xC4	; 196
     1ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1b2:	ec eb       	ldi	r30, 0xBC	; 188
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	88 23       	and	r24, r24
     1ba:	ec f7       	brge	.-6      	; 0x1b6 <i2c_read_ack+0xa>
     1bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1c0:	08 95       	ret

000001c2 <i2c_read_nack>:
     1c2:	84 e8       	ldi	r24, 0x84	; 132
     1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1c8:	ec eb       	ldi	r30, 0xBC	; 188
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	88 23       	and	r24, r24
     1d0:	ec f7       	brge	.-6      	; 0x1cc <i2c_read_nack+0xa>
     1d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1d6:	08 95       	ret

000001d8 <i2c_stop>:
     1d8:	84 e9       	ldi	r24, 0x94	; 148
     1da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1de:	08 95       	ret

000001e0 <bcdtodec>:

	if(tempmonth & 0x80)						// If year is 20xx
		*year = tempyear + 2000;				// Add 2000 to year
	else 										// If year is 19xx
		*year = tempyear + 1900;				// Add 1900 to year
}
     1e0:	98 2f       	mov	r25, r24
     1e2:	92 95       	swap	r25
     1e4:	9f 70       	andi	r25, 0x0F	; 15
     1e6:	99 0f       	add	r25, r25
     1e8:	29 2f       	mov	r18, r25
     1ea:	22 0f       	add	r18, r18
     1ec:	22 0f       	add	r18, r18
     1ee:	92 0f       	add	r25, r18
     1f0:	8f 70       	andi	r24, 0x0F	; 15
     1f2:	89 0f       	add	r24, r25
     1f4:	08 95       	ret

000001f6 <dectobcd>:
     1f6:	9d ec       	ldi	r25, 0xCD	; 205
     1f8:	89 9f       	mul	r24, r25
     1fa:	91 2d       	mov	r25, r1
     1fc:	11 24       	eor	r1, r1
     1fe:	96 95       	lsr	r25
     200:	96 95       	lsr	r25
     202:	96 95       	lsr	r25
     204:	39 2f       	mov	r19, r25
     206:	33 0f       	add	r19, r19
     208:	23 2f       	mov	r18, r19
     20a:	22 0f       	add	r18, r18
     20c:	22 0f       	add	r18, r18
     20e:	23 0f       	add	r18, r19
     210:	82 1b       	sub	r24, r18
     212:	20 e1       	ldi	r18, 0x10	; 16
     214:	92 9f       	mul	r25, r18
     216:	80 0d       	add	r24, r0
     218:	11 24       	eor	r1, r1
     21a:	08 95       	ret

0000021c <rtc_set_time_24h>:
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	c8 2f       	mov	r28, r24
     224:	d6 2f       	mov	r29, r22
     226:	14 2f       	mov	r17, r20
     228:	80 ed       	ldi	r24, 0xD0	; 208
     22a:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_start>
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
     234:	81 2f       	mov	r24, r17
     236:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <dectobcd>
     23a:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
     23e:	8d 2f       	mov	r24, r29
     240:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <dectobcd>
     244:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
     248:	8c 2f       	mov	r24, r28
     24a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <dectobcd>
     24e:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
     252:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_stop>
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	08 95       	ret

0000025e <rtc_set_date>:
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	06 2f       	mov	r16, r22
     26a:	f4 2e       	mov	r15, r20
     26c:	ec 01       	movw	r28, r24
     26e:	c0 5d       	subi	r28, 0xD0	; 208
     270:	d7 40       	sbci	r29, 0x07	; 7
     272:	c4 36       	cpi	r28, 0x64	; 100
     274:	d1 05       	cpc	r29, r1
     276:	38 f0       	brcs	.+14     	; 0x286 <rtc_set_date+0x28>
     278:	cc 59       	subi	r28, 0x9C	; 156
     27a:	df 4f       	sbci	r29, 0xFF	; 255
     27c:	c4 36       	cpi	r28, 0x64	; 100
     27e:	d1 05       	cpc	r29, r1
     280:	20 f4       	brcc	.+8      	; 0x28a <rtc_set_date+0x2c>
     282:	10 e0       	ldi	r17, 0x00	; 0
     284:	04 c0       	rjmp	.+8      	; 0x28e <rtc_set_date+0x30>
     286:	11 e0       	ldi	r17, 0x01	; 1
     288:	02 c0       	rjmp	.+4      	; 0x28e <rtc_set_date+0x30>
     28a:	ec 01       	movw	r28, r24
     28c:	10 e0       	ldi	r17, 0x00	; 0
     28e:	80 ed       	ldi	r24, 0xD0	; 208
     290:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_start>
     294:	84 e0       	ldi	r24, 0x04	; 4
     296:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
     29a:	8f 2d       	mov	r24, r15
     29c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <dectobcd>
     2a0:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
     2a4:	80 2f       	mov	r24, r16
     2a6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <dectobcd>
     2aa:	91 2f       	mov	r25, r17
     2ac:	97 95       	ror	r25
     2ae:	99 27       	eor	r25, r25
     2b0:	97 95       	ror	r25
     2b2:	89 2b       	or	r24, r25
     2b4:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
     2b8:	8c 2f       	mov	r24, r28
     2ba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <dectobcd>
     2be:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
     2c2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_stop>
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	1f 91       	pop	r17
     2cc:	0f 91       	pop	r16
     2ce:	ff 90       	pop	r15
     2d0:	08 95       	ret

000002d2 <rtc_set_day>:
     2d2:	cf 93       	push	r28
     2d4:	c8 2f       	mov	r28, r24
     2d6:	80 ed       	ldi	r24, 0xD0	; 208
     2d8:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_start>
     2dc:	83 e0       	ldi	r24, 0x03	; 3
     2de:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
     2e2:	8c 2f       	mov	r24, r28
     2e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <dectobcd>
     2e8:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
     2ec:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_stop>
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <rtc_get_time_24h>:
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ec 01       	movw	r28, r24
     302:	8b 01       	movw	r16, r22
     304:	7a 01       	movw	r14, r20
     306:	80 ed       	ldi	r24, 0xD0	; 208
     308:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_start>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
     312:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_stop>
     316:	81 ed       	ldi	r24, 0xD1	; 209
     318:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_start>
     31c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_read_ack>
     320:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <bcdtodec>
     324:	f7 01       	movw	r30, r14
     326:	80 83       	st	Z, r24
     328:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_read_ack>
     32c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <bcdtodec>
     330:	f8 01       	movw	r30, r16
     332:	80 83       	st	Z, r24
     334:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <i2c_read_nack>
     338:	8f 73       	andi	r24, 0x3F	; 63
     33a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <bcdtodec>
     33e:	88 83       	st	Y, r24
     340:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_stop>
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	ff 90       	pop	r15
     34e:	ef 90       	pop	r14
     350:	08 95       	ret

00000352 <rtc_get_day>:

uint8_t rtc_get_day()
{
     352:	cf 93       	push	r28
	uint8_t day;

	i2c_start((RTC_ADDR<<1) | I2C_WRITE); 		// Start I2C at RTC address, write mode
     354:	80 ed       	ldi	r24, 0xD0	; 208
     356:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_start>
	i2c_write(0x03);							// Point to register address 0x03
     35a:	83 e0       	ldi	r24, 0x03	; 3
     35c:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
	i2c_stop();									// End I2C communication
     360:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_stop>

	i2c_start((RTC_ADDR<<1) | I2C_READ); 		// Start I2C at RTC address, read mode
     364:	81 ed       	ldi	r24, 0xD1	; 209
     366:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_start>
	day = bcdtodec(i2c_read_nack() & 0x07);		// Read day from register
     36a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <i2c_read_nack>
     36e:	87 70       	andi	r24, 0x07	; 7
     370:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <bcdtodec>
     374:	c8 2f       	mov	r28, r24
	i2c_stop();									// End I2C communication
     376:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_stop>

	return day;
}
     37a:	8c 2f       	mov	r24, r28
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <IO_init>:

	_delay_ms(200);										// Wait for bluetooth module to stop communicate
	PORTD &= ~(1<<AT_MODE);								// Exit configuration (AT) mode
	PORTD |= (1<<BT_PWR);								// Cut power to bluetooth module
	sei();												// Global interrupts enable
}
     380:	39 9a       	sbi	0x07, 1	; 7
     382:	8a b1       	in	r24, 0x0a	; 10
     384:	8b 7d       	andi	r24, 0xDB	; 219
     386:	8a b9       	out	0x0a, r24	; 10
     388:	8a b1       	in	r24, 0x0a	; 10
     38a:	80 65       	ori	r24, 0x50	; 80
     38c:	8a b9       	out	0x0a, r24	; 10
     38e:	8a b1       	in	r24, 0x0a	; 10
     390:	83 77       	andi	r24, 0x73	; 115
     392:	8a b9       	out	0x0a, r24	; 10
     394:	21 9a       	sbi	0x04, 1	; 4
     396:	41 9a       	sbi	0x08, 1	; 8
     398:	5c 9a       	sbi	0x0b, 4	; 11
     39a:	5e 98       	cbi	0x0b, 6	; 11
     39c:	8b b1       	in	r24, 0x0b	; 11
     39e:	8c 68       	ori	r24, 0x8C	; 140
     3a0:	8b b9       	out	0x0b, r24	; 11
     3a2:	e8 e6       	ldi	r30, 0x68	; 104
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	80 81       	ld	r24, Z
     3a8:	84 60       	ori	r24, 0x04	; 4
     3aa:	80 83       	st	Z, r24
     3ac:	ed e6       	ldi	r30, 0x6D	; 109
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	80 62       	ori	r24, 0x20	; 32
     3b4:	80 83       	st	Z, r24
     3b6:	e9 9a       	sbi	0x1d, 1	; 29
     3b8:	e9 e6       	ldi	r30, 0x69	; 105
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	88 60       	ori	r24, 0x08	; 8
     3c0:	80 83       	st	Z, r24
     3c2:	80 81       	ld	r24, Z
     3c4:	8b 7f       	andi	r24, 0xFB	; 251
     3c6:	80 83       	st	Z, r24
     3c8:	08 95       	ret

000003ca <read_eeprom_settings>:
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	04 e9       	ldi	r16, 0x94	; 148
     3d4:	12 e0       	ldi	r17, 0x02	; 2
     3d6:	c1 e0       	ldi	r28, 0x01	; 1
     3d8:	d0 e0       	ldi	r29, 0x00	; 0
     3da:	ce 01       	movw	r24, r28
     3dc:	0e 94 1b 0b 	call	0x1636	; 0x1636 <eeprom_read_byte>
     3e0:	f8 01       	movw	r30, r16
     3e2:	81 93       	st	Z+, r24
     3e4:	8f 01       	movw	r16, r30
     3e6:	21 96       	adiw	r28, 0x01	; 1
     3e8:	c8 30       	cpi	r28, 0x08	; 8
     3ea:	d1 05       	cpc	r29, r1
     3ec:	b1 f7       	brne	.-20     	; 0x3da <read_eeprom_settings+0x10>
     3ee:	0c e8       	ldi	r16, 0x8C	; 140
     3f0:	12 e0       	ldi	r17, 0x02	; 2
     3f2:	ce 01       	movw	r24, r28
     3f4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <eeprom_read_byte>
     3f8:	f8 01       	movw	r30, r16
     3fa:	81 93       	st	Z+, r24
     3fc:	8f 01       	movw	r16, r30
     3fe:	21 96       	adiw	r28, 0x01	; 1
     400:	cf 30       	cpi	r28, 0x0F	; 15
     402:	d1 05       	cpc	r29, r1
     404:	b1 f7       	brne	.-20     	; 0x3f2 <read_eeprom_settings+0x28>
     406:	05 e8       	ldi	r16, 0x85	; 133
     408:	12 e0       	ldi	r17, 0x02	; 2
     40a:	ce 01       	movw	r24, r28
     40c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <eeprom_read_byte>
     410:	f8 01       	movw	r30, r16
     412:	81 93       	st	Z+, r24
     414:	8f 01       	movw	r16, r30
     416:	21 96       	adiw	r28, 0x01	; 1
     418:	c6 31       	cpi	r28, 0x16	; 22
     41a:	d1 05       	cpc	r29, r1
     41c:	b1 f7       	brne	.-20     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     41e:	86 e1       	ldi	r24, 0x16	; 22
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 1b 0b 	call	0x1636	; 0x1636 <eeprom_read_byte>
     426:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <alrm_duration>
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	08 95       	ret

00000434 <write_eeprom_settings>:
     434:	47 e0       	ldi	r20, 0x07	; 7
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	84 e9       	ldi	r24, 0x94	; 148
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	0e 94 23 0b 	call	0x1646	; 0x1646 <eeprom_update_block>
     444:	47 e0       	ldi	r20, 0x07	; 7
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	68 e0       	ldi	r22, 0x08	; 8
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	8c e8       	ldi	r24, 0x8C	; 140
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	0e 94 23 0b 	call	0x1646	; 0x1646 <eeprom_update_block>
     454:	47 e0       	ldi	r20, 0x07	; 7
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	6f e0       	ldi	r22, 0x0F	; 15
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	85 e8       	ldi	r24, 0x85	; 133
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	0e 94 23 0b 	call	0x1646	; 0x1646 <eeprom_update_block>
     464:	60 91 93 02 	lds	r22, 0x0293	; 0x800293 <alrm_duration>
     468:	86 e1       	ldi	r24, 0x16	; 22
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 33 0b 	call	0x1666	; 0x1666 <eeprom_update_byte>
     470:	08 95       	ret

00000472 <PWM_init>:
     472:	e0 e8       	ldi	r30, 0x80	; 128
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	80 68       	ori	r24, 0x80	; 128
     47a:	80 83       	st	Z, r24
     47c:	80 81       	ld	r24, Z
     47e:	8f 7b       	andi	r24, 0xBF	; 191
     480:	80 83       	st	Z, r24
     482:	80 81       	ld	r24, Z
     484:	82 60       	ori	r24, 0x02	; 2
     486:	80 83       	st	Z, r24
     488:	80 81       	ld	r24, Z
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	80 83       	st	Z, r24
     48e:	e1 e8       	ldi	r30, 0x81	; 129
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	80 61       	ori	r24, 0x10	; 16
     496:	80 83       	st	Z, r24
     498:	80 81       	ld	r24, Z
     49a:	88 60       	ori	r24, 0x08	; 8
     49c:	80 83       	st	Z, r24
     49e:	80 81       	ld	r24, Z
     4a0:	81 60       	ori	r24, 0x01	; 1
     4a2:	80 83       	st	Z, r24
     4a4:	80 81       	ld	r24, Z
     4a6:	89 7f       	andi	r24, 0xF9	; 249
     4a8:	80 83       	st	Z, r24
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	9f ef       	ldi	r25, 0xFF	; 255
     4ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     4b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     4b6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4ba:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4be:	08 95       	ret

000004c0 <PWM_on>:
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	e0 e8       	ldi	r30, 0x80	; 128
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	80 68       	ori	r24, 0x80	; 128
     4cc:	80 83       	st	Z, r24
     4ce:	80 81       	ld	r24, Z
     4d0:	8f 7b       	andi	r24, 0xBF	; 191
     4d2:	80 83       	st	Z, r24
     4d4:	80 81       	ld	r24, Z
     4d6:	8d 7f       	andi	r24, 0xFD	; 253
     4d8:	80 83       	st	Z, r24
     4da:	80 81       	ld	r24, Z
     4dc:	8e 7f       	andi	r24, 0xFE	; 254
     4de:	80 83       	st	Z, r24
     4e0:	a1 e8       	ldi	r26, 0x81	; 129
     4e2:	b0 e0       	ldi	r27, 0x00	; 0
     4e4:	8c 91       	ld	r24, X
     4e6:	8f 7e       	andi	r24, 0xEF	; 239
     4e8:	8c 93       	st	X, r24
     4ea:	8c 91       	ld	r24, X
     4ec:	87 7f       	andi	r24, 0xF7	; 247
     4ee:	8c 93       	st	X, r24
     4f0:	c2 e8       	ldi	r28, 0x82	; 130
     4f2:	d0 e0       	ldi	r29, 0x00	; 0
     4f4:	88 81       	ld	r24, Y
     4f6:	80 68       	ori	r24, 0x80	; 128
     4f8:	88 83       	st	Y, r24
     4fa:	80 81       	ld	r24, Z
     4fc:	82 60       	ori	r24, 0x02	; 2
     4fe:	80 83       	st	Z, r24
     500:	80 81       	ld	r24, Z
     502:	8e 7f       	andi	r24, 0xFE	; 254
     504:	80 83       	st	Z, r24
     506:	8c 91       	ld	r24, X
     508:	80 61       	ori	r24, 0x10	; 16
     50a:	8c 93       	st	X, r24
     50c:	8c 91       	ld	r24, X
     50e:	88 60       	ori	r24, 0x08	; 8
     510:	8c 93       	st	X, r24
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <PWM_off>:
     518:	e0 e8       	ldi	r30, 0x80	; 128
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	8f 77       	andi	r24, 0x7F	; 127
     520:	80 83       	st	Z, r24
     522:	80 81       	ld	r24, Z
     524:	8f 7b       	andi	r24, 0xBF	; 191
     526:	80 83       	st	Z, r24
     528:	08 95       	ret

0000052a <PWM_state>:
     52a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     52e:	88 1f       	adc	r24, r24
     530:	88 27       	eor	r24, r24
     532:	88 1f       	adc	r24, r24
     534:	08 95       	ret

00000536 <ADC_init>:
     536:	ec e7       	ldi	r30, 0x7C	; 124
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	8f 7b       	andi	r24, 0xBF	; 191
     53e:	80 83       	st	Z, r24
     540:	80 81       	ld	r24, Z
     542:	8f 7d       	andi	r24, 0xDF	; 223
     544:	80 83       	st	Z, r24
     546:	80 81       	ld	r24, Z
     548:	82 60       	ori	r24, 0x02	; 2
     54a:	80 83       	st	Z, r24
     54c:	80 81       	ld	r24, Z
     54e:	82 7f       	andi	r24, 0xF2	; 242
     550:	80 83       	st	Z, r24
     552:	ea e7       	ldi	r30, 0x7A	; 122
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	80 81       	ld	r24, Z
     558:	87 60       	ori	r24, 0x07	; 7
     55a:	80 83       	st	Z, r24
     55c:	80 81       	ld	r24, Z
     55e:	88 68       	ori	r24, 0x88	; 136
     560:	80 83       	st	Z, r24
     562:	80 81       	ld	r24, Z
     564:	80 64       	ori	r24, 0x40	; 64
     566:	80 83       	st	Z, r24
     568:	08 95       	ret

0000056a <UART_init>:
     56a:	89 e1       	ldi	r24, 0x19	; 25
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     572:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     576:	e0 ec       	ldi	r30, 0xC0	; 192
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	8d 7f       	andi	r24, 0xFD	; 253
     57e:	80 83       	st	Z, r24
     580:	a1 ec       	ldi	r26, 0xC1	; 193
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	8c 91       	ld	r24, X
     586:	88 61       	ori	r24, 0x18	; 24
     588:	8c 93       	st	X, r24
     58a:	e2 ec       	ldi	r30, 0xC2	; 194
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	8f 73       	andi	r24, 0x3F	; 63
     592:	80 83       	st	Z, r24
     594:	80 81       	ld	r24, Z
     596:	8f 7c       	andi	r24, 0xCF	; 207
     598:	80 83       	st	Z, r24
     59a:	80 81       	ld	r24, Z
     59c:	87 7f       	andi	r24, 0xF7	; 247
     59e:	80 83       	st	Z, r24
     5a0:	8c 91       	ld	r24, X
     5a2:	8b 7f       	andi	r24, 0xFB	; 251
     5a4:	8c 93       	st	X, r24
     5a6:	80 81       	ld	r24, Z
     5a8:	86 60       	ori	r24, 0x06	; 6
     5aa:	80 83       	st	Z, r24
     5ac:	08 95       	ret

000005ae <UART_transmit>:
     5ae:	e0 ec       	ldi	r30, 0xC0	; 192
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	90 81       	ld	r25, Z
     5b4:	95 ff       	sbrs	r25, 5
     5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <UART_transmit+0x4>
     5b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     5bc:	08 95       	ret

000005be <UART_transmit_String>:
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
     5c4:	88 81       	ld	r24, Y
     5c6:	88 23       	and	r24, r24
     5c8:	31 f0       	breq	.+12     	; 0x5d6 <UART_transmit_String+0x18>
     5ca:	21 96       	adiw	r28, 0x01	; 1
     5cc:	0e 94 d7 02 	call	0x5ae	; 0x5ae <UART_transmit>
     5d0:	89 91       	ld	r24, Y+
     5d2:	81 11       	cpse	r24, r1
     5d4:	fb cf       	rjmp	.-10     	; 0x5cc <UART_transmit_String+0xe>
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <debug>:
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	2a 97       	sbiw	r28, 0x0a	; 10
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	f8 94       	cli
     5fa:	41 98       	cbi	0x08, 1	; 8
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     604:	8c e0       	ldi	r24, 0x0C	; 12
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     60c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <read_eeprom_settings>
     610:	8f e1       	ldi	r24, 0x1F	; 31
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     618:	87 e3       	ldi	r24, 0x37	; 55
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     620:	04 e9       	ldi	r16, 0x94	; 148
     622:	12 e0       	ldi	r17, 0x02	; 2
     624:	0f 2e       	mov	r0, r31
     626:	fb e9       	ldi	r31, 0x9B	; 155
     628:	ef 2e       	mov	r14, r31
     62a:	f2 e0       	ldi	r31, 0x02	; 2
     62c:	ff 2e       	mov	r15, r31
     62e:	f0 2d       	mov	r31, r0
     630:	f8 01       	movw	r30, r16
     632:	81 91       	ld	r24, Z+
     634:	8f 01       	movw	r16, r30
     636:	0e 94 d7 02 	call	0x5ae	; 0x5ae <UART_transmit>
     63a:	8c e9       	ldi	r24, 0x9C	; 156
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     642:	e0 16       	cp	r14, r16
     644:	f1 06       	cpc	r15, r17
     646:	a1 f7       	brne	.-24     	; 0x630 <debug+0x54>
     648:	82 e4       	ldi	r24, 0x42	; 66
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     650:	0c e8       	ldi	r16, 0x8C	; 140
     652:	12 e0       	ldi	r17, 0x02	; 2
     654:	0f 2e       	mov	r0, r31
     656:	f3 e9       	ldi	r31, 0x93	; 147
     658:	ef 2e       	mov	r14, r31
     65a:	f2 e0       	ldi	r31, 0x02	; 2
     65c:	ff 2e       	mov	r15, r31
     65e:	f0 2d       	mov	r31, r0
     660:	f8 01       	movw	r30, r16
     662:	81 91       	ld	r24, Z+
     664:	8f 01       	movw	r16, r30
     666:	0e 94 d7 02 	call	0x5ae	; 0x5ae <UART_transmit>
     66a:	8c e9       	ldi	r24, 0x9C	; 156
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     672:	e0 16       	cp	r14, r16
     674:	f1 06       	cpc	r15, r17
     676:	a1 f7       	brne	.-24     	; 0x660 <debug+0x84>
     678:	8e e4       	ldi	r24, 0x4E	; 78
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     680:	05 e8       	ldi	r16, 0x85	; 133
     682:	12 e0       	ldi	r17, 0x02	; 2
     684:	0f 2e       	mov	r0, r31
     686:	fc e8       	ldi	r31, 0x8C	; 140
     688:	ef 2e       	mov	r14, r31
     68a:	f2 e0       	ldi	r31, 0x02	; 2
     68c:	ff 2e       	mov	r15, r31
     68e:	f0 2d       	mov	r31, r0
     690:	f8 01       	movw	r30, r16
     692:	81 91       	ld	r24, Z+
     694:	8f 01       	movw	r16, r30
     696:	0e 94 d7 02 	call	0x5ae	; 0x5ae <UART_transmit>
     69a:	8c e9       	ldi	r24, 0x9C	; 156
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     6a2:	0e 15       	cp	r16, r14
     6a4:	1f 05       	cpc	r17, r15
     6a6:	a1 f7       	brne	.-24     	; 0x690 <debug+0xb4>
     6a8:	8b e5       	ldi	r24, 0x5B	; 91
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     6b0:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <alrm_duration>
     6b4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <UART_transmit>
     6b8:	84 e8       	ldi	r24, 0x84	; 132
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     6c0:	8d e6       	ldi	r24, 0x6D	; 109
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     6c8:	4c e9       	ldi	r20, 0x9C	; 156
     6ca:	52 e0       	ldi	r21, 0x02	; 2
     6cc:	6f e9       	ldi	r22, 0x9F	; 159
     6ce:	72 e0       	ldi	r23, 0x02	; 2
     6d0:	8d e9       	ldi	r24, 0x9D	; 157
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <rtc_get_time_24h>
     6d8:	0e 94 a9 01 	call	0x352	; 0x352 <rtc_get_day>
     6dc:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <actual_day>
     6e0:	87 e8       	ldi	r24, 0x87	; 135
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     6e8:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <actual_hour>
     6ec:	4a e0       	ldi	r20, 0x0A	; 10
     6ee:	be 01       	movw	r22, r28
     6f0:	6f 5f       	subi	r22, 0xFF	; 255
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__itoa_ncheck>
     6fa:	ce 01       	movw	r24, r28
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     702:	84 e9       	ldi	r24, 0x94	; 148
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     70a:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <actual_min>
     70e:	4a e0       	ldi	r20, 0x0A	; 10
     710:	be 01       	movw	r22, r28
     712:	6f 5f       	subi	r22, 0xFF	; 255
     714:	7f 4f       	sbci	r23, 0xFF	; 255
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__itoa_ncheck>
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     724:	89 e9       	ldi	r24, 0x99	; 153
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     72c:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <actual_sec>
     730:	4a e0       	ldi	r20, 0x0A	; 10
     732:	be 01       	movw	r22, r28
     734:	6f 5f       	subi	r22, 0xFF	; 255
     736:	7f 4f       	sbci	r23, 0xFF	; 255
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__itoa_ncheck>
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     746:	8f e9       	ldi	r24, 0x9F	; 159
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     74e:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <actual_day>
     752:	4a e0       	ldi	r20, 0x0A	; 10
     754:	be 01       	movw	r22, r28
     756:	6f 5f       	subi	r22, 0xFF	; 255
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__itoa_ncheck>
     760:	ce 01       	movw	r24, r28
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     768:	84 e8       	ldi	r24, 0x84	; 132
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     770:	87 eb       	ldi	r24, 0xB7	; 183
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     778:	ea e7       	ldi	r30, 0x7A	; 122
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	80 64       	ori	r24, 0x40	; 64
     780:	80 83       	st	Z, r24
     782:	80 81       	ld	r24, Z
     784:	86 fd       	sbrc	r24, 6
     786:	fd cf       	rjmp	.-6      	; 0x782 <debug+0x1a6>
     788:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     78c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     790:	4a e0       	ldi	r20, 0x0A	; 10
     792:	be 01       	movw	r22, r28
     794:	6f 5f       	subi	r22, 0xFF	; 255
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__itoa_ncheck>
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     7a4:	84 e8       	ldi	r24, 0x84	; 132
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     7ac:	84 ec       	ldi	r24, 0xC4	; 196
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     7b4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <PWM_on>
     7b8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     7bc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     7c0:	2f ef       	ldi	r18, 0xFF	; 255
     7c2:	3f ef       	ldi	r19, 0xFF	; 255
     7c4:	e8 e8       	ldi	r30, 0x88	; 136
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	91 81       	ldd	r25, Z+1	; 0x01
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	91 83       	std	Z+1, r25	; 0x01
     7d0:	80 83       	st	Z, r24
     7d2:	87 ec       	ldi	r24, 0xC7	; 199
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <debug+0x1fa>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <debug+0x200>
     7dc:	00 00       	nop
     7de:	21 50       	subi	r18, 0x01	; 1
     7e0:	31 09       	sbc	r19, r1
     7e2:	91 f7       	brne	.-28     	; 0x7c8 <debug+0x1ec>
     7e4:	89 ef       	ldi	r24, 0xF9	; 249
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     7ec:	0e 94 8c 02 	call	0x518	; 0x518 <PWM_off>
     7f0:	8f ef       	ldi	r24, 0xFF	; 255
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     7f8:	41 9a       	sbi	0x08, 1	; 8
     7fa:	2a 96       	adiw	r28, 0x0a	; 10
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	08 95       	ret

00000814 <alarm_start_time_calculation>:
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <actual_day>
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	df 01       	movw	r26, r30
     820:	ab 57       	subi	r26, 0x7B	; 123
     822:	bd 4f       	sbci	r27, 0xFD	; 253
     824:	3c 91       	ld	r19, X
     826:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <alrm_duration>
     82a:	43 2f       	mov	r20, r19
     82c:	42 1b       	sub	r20, r18
     82e:	44 5c       	subi	r20, 0xC4	; 196
     830:	53 2f       	mov	r21, r19
     832:	52 1b       	sub	r21, r18
     834:	87 e0       	ldi	r24, 0x07	; 7
     836:	ef 01       	movw	r28, r30
     838:	c2 58       	subi	r28, 0x82	; 130
     83a:	dd 4f       	sbci	r29, 0xFD	; 253
     83c:	df 01       	movw	r26, r30
     83e:	a4 57       	subi	r26, 0x74	; 116
     840:	bd 4f       	sbci	r27, 0xFD	; 253
     842:	e9 58       	subi	r30, 0x89	; 137
     844:	fd 4f       	sbci	r31, 0xFD	; 253
     846:	32 17       	cp	r19, r18
     848:	28 f4       	brcc	.+10     	; 0x854 <alarm_start_time_calculation+0x40>
     84a:	9c 91       	ld	r25, X
     84c:	91 50       	subi	r25, 0x01	; 1
     84e:	98 83       	st	Y, r25
     850:	40 83       	st	Z, r20
     852:	03 c0       	rjmp	.+6      	; 0x85a <alarm_start_time_calculation+0x46>
     854:	9c 91       	ld	r25, X
     856:	98 83       	st	Y, r25
     858:	50 83       	st	Z, r21
     85a:	81 50       	subi	r24, 0x01	; 1
     85c:	a1 f7       	brne	.-24     	; 0x846 <alarm_start_time_calculation+0x32>
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <set_RTC>:

void set_RTC(uint8_t hr,uint8_t min, uint8_t sec, uint8_t year, uint8_t mon, uint8_t date, uint8_t dow)
{
     864:	cf 92       	push	r12
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	d8 2f       	mov	r29, r24
     874:	16 2f       	mov	r17, r22
     876:	f4 2e       	mov	r15, r20
     878:	c2 2f       	mov	r28, r18
	IO_init();											// Initialize IOs
     87a:	0e 94 c0 01 	call	0x380	; 0x380 <IO_init>
	i2c_init();											// Initialize I2C communication
     87e:	0e 94 9b 00 	call	0x136	; 0x136 <i2c_init>

	rtc_set_time_24h(hr,min,sec);						// Set time to RTC
     882:	4f 2d       	mov	r20, r15
     884:	61 2f       	mov	r22, r17
     886:	8d 2f       	mov	r24, r29
     888:	0e 94 0e 01 	call	0x21c	; 0x21c <rtc_set_time_24h>
	rtc_set_date(year,mon,date);						// Set date to RTC
     88c:	4e 2d       	mov	r20, r14
     88e:	60 2f       	mov	r22, r16
     890:	8c 2f       	mov	r24, r28
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 2f 01 	call	0x25e	; 0x25e <rtc_set_date>
	rtc_set_day(dow);									// Set day of the week to RTC
     898:	8c 2d       	mov	r24, r12
     89a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <rtc_set_day>
}
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	cf 90       	pop	r12
     8ac:	08 95       	ret

000008ae <update_state_machine>:

void update_state_machine()								// State machine
{
	uint8_t buff[10];
	switch (state)
     8ae:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <state>
     8b2:	82 30       	cpi	r24, 0x02	; 2
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <update_state_machine+0xa>
     8b6:	52 c0       	rjmp	.+164    	; 0x95c <__stack+0x5d>
     8b8:	28 f4       	brcc	.+10     	; 0x8c4 <update_state_machine+0x16>
     8ba:	88 23       	and	r24, r24
     8bc:	51 f0       	breq	.+20     	; 0x8d2 <update_state_machine+0x24>
     8be:	81 30       	cpi	r24, 0x01	; 1
     8c0:	79 f1       	breq	.+94     	; 0x920 <__stack+0x21>
     8c2:	77 c0       	rjmp	.+238    	; 0x9b2 <__stack+0xb3>
     8c4:	83 30       	cpi	r24, 0x03	; 3
     8c6:	09 f4       	brne	.+2      	; 0x8ca <update_state_machine+0x1c>
     8c8:	64 c0       	rjmp	.+200    	; 0x992 <__stack+0x93>
     8ca:	84 30       	cpi	r24, 0x04	; 4
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <update_state_machine+0x22>
     8ce:	5d c0       	rjmp	.+186    	; 0x98a <__stack+0x8b>
     8d0:	70 c0       	rjmp	.+224    	; 0x9b2 <__stack+0xb3>
	{
		case INIT :
		IO_init();										// Initialize IOs
     8d2:	0e 94 c0 01 	call	0x380	; 0x380 <IO_init>
		read_eeprom_settings();							// Gather previously stored settings
     8d6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <read_eeprom_settings>
		PWM_init();										// Initialize PWM peripheral
     8da:	0e 94 39 02 	call	0x472	; 0x472 <PWM_init>
		ADC_init();										// Initialize ADC peripheral
     8de:	0e 94 9b 02 	call	0x536	; 0x536 <ADC_init>
		UART_init();									// Initialize UART peripheral
     8e2:	0e 94 b5 02 	call	0x56a	; 0x56a <UART_init>
		//BT_init();										// Initialize bluetooth module
		i2c_init();										// Initialize I2C communication
     8e6:	0e 94 9b 00 	call	0x136	; 0x136 <i2c_init>

		rtc_get_time_24h(&actual_hour, &actual_min, &actual_sec); // Get time from RTC
     8ea:	4c e9       	ldi	r20, 0x9C	; 156
     8ec:	52 e0       	ldi	r21, 0x02	; 2
     8ee:	6f e9       	ldi	r22, 0x9F	; 159
     8f0:	72 e0       	ldi	r23, 0x02	; 2
     8f2:	8d e9       	ldi	r24, 0x9D	; 157
     8f4:	92 e0       	ldi	r25, 0x02	; 2
     8f6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <rtc_get_time_24h>
		actual_day = rtc_get_day();						// Get day from RTC Monday is 0 (RTC return 1 for Monday)
     8fa:	0e 94 a9 01 	call	0x352	; 0x352 <rtc_get_day>
     8fe:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <actual_day>
		alarm_start_time_calculation();					// Calculate start time of alarm based on alarm duration
     902:	0e 94 0a 04 	call	0x814	; 0x814 <alarm_start_time_calculation>
		TIMSK1 |= (1<<TOIE1);							// Enable interrupt on timer 1 overflow
     906:	ef e6       	ldi	r30, 0x6F	; 111
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	81 60       	ori	r24, 0x01	; 1
     90e:	80 83       	st	Z, r24

		if(bit_is_set(PIND, DEBUG_JUMPER))debug();		// If jumper is removed, go to debug mode
     910:	4f 99       	sbic	0x09, 7	; 9
     912:	0e 94 ee 02 	call	0x5dc	; 0x5dc <debug>
		sei();											// Global interrupts enable
     916:	78 94       	sei
		state = STANDBY;								// After initialization done, got to standby state
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <state>
		break;
     91e:	08 95       	ret

		case STANDBY :
		if(PWM_state()==1) PWM_off();					// Turn off PWM output if it is not already turned off
     920:	0e 94 95 02 	call	0x52a	; 0x52a <PWM_state>
     924:	81 30       	cpi	r24, 0x01	; 1
     926:	11 f4       	brne	.+4      	; 0x92c <__stack+0x2d>
     928:	0e 94 8c 02 	call	0x518	; 0x518 <PWM_off>
		if(slider >= OFFTHRESHOLD) state = LAMP;		// If slider isn't on 0, turn on the Lamp
     92c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <slider>
     930:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <slider+0x1>
     934:	02 97       	sbiw	r24, 0x02	; 2
     936:	18 f0       	brcs	.+6      	; 0x93e <__stack+0x3f>
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <state>
		if(pair_request_flag) state = BLUETOOTH;		// If pair button is pressed, go to bluetooth state
     93e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <pair_request_flag>
     942:	88 23       	and	r24, r24
     944:	19 f0       	breq	.+6      	; 0x94c <__stack+0x4d>
     946:	84 e0       	ldi	r24, 0x04	; 4
     948:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <state>
		if(alarm_in_process) state = ALARM;				// If an alarm is reached go to alarm state
     94c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <alarm_in_process>
     950:	88 23       	and	r24, r24
     952:	89 f1       	breq	.+98     	; 0x9b6 <__stack+0xb7>
     954:	83 e0       	ldi	r24, 0x03	; 3
     956:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <state>
     95a:	08 95       	ret
		break;

		case LAMP :
		if(PWM_state()==0) PWM_on();					// Turn on PWM output if it is not already turned on
     95c:	0e 94 95 02 	call	0x52a	; 0x52a <PWM_state>
     960:	81 11       	cpse	r24, r1
     962:	02 c0       	rjmp	.+4      	; 0x968 <__stack+0x69>
     964:	0e 94 60 02 	call	0x4c0	; 0x4c0 <PWM_on>
		if(slider < OFFTHRESHOLD) state = STANDBY;		// If slider is on 0, turn off the Lamp
     968:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <slider>
     96c:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <slider+0x1>
     970:	02 97       	sbiw	r24, 0x02	; 2
     972:	18 f4       	brcc	.+6      	; 0x97a <__stack+0x7b>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <state>
		if(pair_request_flag) state = BLUETOOTH;		// If pair button is pressed, got to bluetooth state
     97a:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <pair_request_flag>
     97e:	88 23       	and	r24, r24
     980:	d1 f0       	breq	.+52     	; 0x9b6 <__stack+0xb7>
     982:	84 e0       	ldi	r24, 0x04	; 4
     984:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <state>
     988:	08 95       	ret
		UCSR0B |= ((1<<RXCIE0) | (1<<TXCIE0));			// Enable RX and TX interrupts
		while (is_paired);								// Wait for bluetooth communication complete					// TO IMPROVE
		UCSR0B &= ~((1<<RXCIE0) | (1<<TXCIE0));			// Disable RX and TX interrupts
		pair_request_flag = 0;							// Pairing complete
		PORTD |= (1<<BT_PWR);							// Cut power to bluetooth module*/
		state = STANDBY;								// Go to standby state
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <state>
		break;
     990:	08 95       	ret

		case ALARM :
		if(PWM_state()==0) PWM_on();					// Turn on PWM output if it is not already turned on
     992:	0e 94 95 02 	call	0x52a	; 0x52a <PWM_state>
     996:	81 11       	cpse	r24, r1
     998:	02 c0       	rjmp	.+4      	; 0x99e <__stack+0x9f>
     99a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <PWM_on>
		if(ADCSRA & (1<<ADIE)) ADCSRA &= ~(1<<ADIE);	// Disable ADC interrupt (if not already done), therefore stop ADC
     99e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     9a2:	83 ff       	sbrs	r24, 3
     9a4:	08 c0       	rjmp	.+16     	; 0x9b6 <__stack+0xb7>
     9a6:	ea e7       	ldi	r30, 0x7A	; 122
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	87 7f       	andi	r24, 0xF7	; 247
     9ae:	80 83       	st	Z, r24
     9b0:	08 95       	ret
		break;

		default : state = INIT;							// In case of a fault, get back to INIT state
     9b2:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <state>
     9b6:	08 95       	ret

000009b8 <main>:
float duty_cycle_increments;							// Increments used for PWM fade-in during the alarm
float f_duty_cycle=0;									// Duty cycle values in float type to set OCR1A (int type)

// Main programm//////////////////////////////////////////
int main(void)
{
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	2a 97       	sbiw	r28, 0x0a	; 10
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
	set_RTC(12,28,50,2017,1,1,1);						// To set RTC for the first time, uncomment this line, change the numbers
     9cc:	cc 24       	eor	r12, r12
     9ce:	c3 94       	inc	r12
     9d0:	ee 24       	eor	r14, r14
     9d2:	e3 94       	inc	r14
     9d4:	01 e0       	ldi	r16, 0x01	; 1
     9d6:	21 ee       	ldi	r18, 0xE1	; 225
     9d8:	42 e3       	ldi	r20, 0x32	; 50
     9da:	6c e1       	ldi	r22, 0x1C	; 28
     9dc:	8c e0       	ldi	r24, 0x0C	; 12
     9de:	0e 94 32 04 	call	0x864	; 0x864 <set_RTC>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9e2:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <state>
     9e6:	4a e0       	ldi	r20, 0x0A	; 10
     9e8:	be 01       	movw	r22, r28
     9ea:	6f 5f       	subi	r22, 0xFF	; 255
     9ec:	7f 4f       	sbci	r23, 0xFF	; 255
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__itoa_ncheck>
														// Data is in this format : set_RTC(hour,minutes,seconds,year,month,date,dayofweek)

	uint8_t previous_state=0;
	uint8_t buff[10];
	itoa(state, buff,10);								// Convert to ASCII
	UART_transmit_String(buff);
     9f4:	ce 01       	movw	r24, r28
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>

	alrm_EN[1] = 1;
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <alrm_EN+0x1>
	alrm_hr[1] = 12;
     a02:	9c e0       	ldi	r25, 0x0C	; 12
     a04:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <alrm_hr+0x1>
	alrm_min[1] = 30;
     a08:	9e e1       	ldi	r25, 0x1E	; 30
     a0a:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <alrm_min+0x1>
	alrm_duration = 1;
     a0e:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <alrm_duration>
	write_eeprom_settings();
     a12:	0e 94 1a 02 	call	0x434	; 0x434 <write_eeprom_settings>
     a16:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <state>
     a1a:	4a e0       	ldi	r20, 0x0A	; 10
     a1c:	be 01       	movw	r22, r28
     a1e:	6f 5f       	subi	r22, 0xFF	; 255
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__itoa_ncheck>

	itoa(state, buff,10);								// Convert to ASCII
	UART_transmit_String("State ");						// Transmit string
     a28:	85 e6       	ldi	r24, 0x65	; 101
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
	UART_transmit_String(buff);							// Transmit string
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
	UART_transmit_String(".\n");						// Transmit string
     a38:	84 e8       	ldi	r24, 0x84	; 132
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>

	while (1)
	{
		previous_state=state;
		update_state_machine();							// Main state machine
     a40:	0e 94 57 04 	call	0x8ae	; 0x8ae <update_state_machine>
     a44:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <state>
     a48:	4a e0       	ldi	r20, 0x0A	; 10
     a4a:	be 01       	movw	r22, r28
     a4c:	6f 5f       	subi	r22, 0xFF	; 255
     a4e:	7f 4f       	sbci	r23, 0xFF	; 255
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__itoa_ncheck>
		//if(previous_state!=state)
		//{
			itoa(state, buff,10);						// Convert to ASCII
			UART_transmit_String("State ");				// Transmit string
     a56:	85 e6       	ldi	r24, 0x65	; 101
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
			UART_transmit_String(buff);					// Transmit string
     a5e:	ce 01       	movw	r24, r28
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
			UART_transmit_String(".\n");				// Transmit string
     a66:	84 e8       	ldi	r24, 0x84	; 132
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	0e 94 df 02 	call	0x5be	; 0x5be <UART_transmit_String>
     a6e:	e8 cf       	rjmp	.-48     	; 0xa40 <main+0x88>

00000a70 <__vector_2>:
}

// Interrupt vectors//////////////////////////////////////

ISR(INT1_vect)											// When pair / stop button is pressed
{
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	8f 93       	push	r24
	if (alarm_in_process)								// If alarm is in process
     a7c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <alarm_in_process>
     a80:	88 23       	and	r24, r24
     a82:	21 f0       	breq	.+8      	; 0xa8c <__vector_2+0x1c>
		stop_alrm = 1;									// Stop the alarm
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <stop_alrm>
     a8a:	03 c0       	rjmp	.+6      	; 0xa92 <__vector_2+0x22>
	else												// If no alarm is in process
		pair_request_flag = 1;							// Go to bluetooth pair state
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <pair_request_flag>
}
     a92:	8f 91       	pop	r24
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	0f 90       	pop	r0
     a9a:	1f 90       	pop	r1
     a9c:	18 95       	reti

00000a9e <__vector_5>:

ISR(PCINT2_vect)										// Interrupt on bluetooth pairing status changed
{
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	8f 93       	push	r24
	if (bit_is_set(PORTD, PAIR_INFO))					// If bluetooth is paired
     aaa:	5d 9b       	sbis	0x0b, 5	; 11
     aac:	04 c0       	rjmp	.+8      	; 0xab6 <__vector_5+0x18>
	{
		is_paired = 1;									// Flag set
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <is_paired>
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <__vector_5+0x1c>
	}
	else												// If bluetooth is not paired
	{
		is_paired = 0;									// Flag reset
     ab6:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <is_paired>
	}
}
     aba:	8f 91       	pop	r24
     abc:	0f 90       	pop	r0
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	0f 90       	pop	r0
     ac2:	1f 90       	pop	r1
     ac4:	18 95       	reti

00000ac6 <__vector_13>:

ISR(TIMER1_OVF_vect)									// Interrupt on PWM timer overflow, each 4.096ms (244Hz)
{
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	2f 93       	push	r18
     ada:	3f 93       	push	r19
     adc:	4f 93       	push	r20
     ade:	5f 93       	push	r21
     ae0:	6f 93       	push	r22
     ae2:	7f 93       	push	r23
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
	uint8_t buff[20];
	tmr1ovf ++;											// Overflow counter
     af0:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <tmr1ovf>
     af4:	8f 5f       	subi	r24, 0xFF	; 255
     af6:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <tmr1ovf>
	if(tmr1ovf == 122)									// Each 0.5sec (122*4.096ms = 0.5s)
     afa:	8a 37       	cpi	r24, 0x7A	; 122
     afc:	81 f4       	brne	.+32     	; 0xb1e <__vector_13+0x58>
	{
		tmr1ovf = 0;									// Reset the overflow counter
     afe:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <tmr1ovf>
		rtc_get_time_24h(&actual_hour, &actual_min, &actual_sec); // Get time from RTC
     b02:	4c e9       	ldi	r20, 0x9C	; 156
     b04:	52 e0       	ldi	r21, 0x02	; 2
     b06:	6f e9       	ldi	r22, 0x9F	; 159
     b08:	72 e0       	ldi	r23, 0x02	; 2
     b0a:	8d e9       	ldi	r24, 0x9D	; 157
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <rtc_get_time_24h>
		actual_day = rtc_get_day();						// Get day from RTC Monday is 0 (RTC return 1 for Monday)
     b12:	0e 94 a9 01 	call	0x352	; 0x352 <rtc_get_day>
     b16:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <actual_day>
		alarm_start_time_calculation();					// Calculate start time of alarm based on alarm duration
     b1a:	0e 94 0a 04 	call	0x814	; 0x814 <alarm_start_time_calculation>
	}
	if((alarm_in_process == 0) && (actual_hour == alrm_start_hr[actual_day]) && (actual_min == alrm_start_min[actual_day]) && (alrm_EN[actual_day] == 1) && (bit_is_set(PIND, ALRM_BTN)))
     b1e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <alarm_in_process>
     b22:	81 11       	cpse	r24, r1
     b24:	54 c0       	rjmp	.+168    	; 0xbce <__vector_13+0x108>
     b26:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <actual_day>
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	fc 01       	movw	r30, r24
     b2e:	e2 58       	subi	r30, 0x82	; 130
     b30:	fd 4f       	sbci	r31, 0xFD	; 253
     b32:	30 81       	ld	r19, Z
     b34:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <actual_hour>
     b38:	32 13       	cpse	r19, r18
     b3a:	aa c0       	rjmp	.+340    	; 0xc90 <__vector_13+0x1ca>
     b3c:	fc 01       	movw	r30, r24
     b3e:	e9 58       	subi	r30, 0x89	; 137
     b40:	fd 4f       	sbci	r31, 0xFD	; 253
     b42:	30 81       	ld	r19, Z
     b44:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <actual_min>
     b48:	32 13       	cpse	r19, r18
     b4a:	a2 c0       	rjmp	.+324    	; 0xc90 <__vector_13+0x1ca>
     b4c:	fc 01       	movw	r30, r24
     b4e:	ec 56       	subi	r30, 0x6C	; 108
     b50:	fd 4f       	sbci	r31, 0xFD	; 253
     b52:	80 81       	ld	r24, Z
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	09 f0       	breq	.+2      	; 0xb5a <__vector_13+0x94>
     b58:	9b c0       	rjmp	.+310    	; 0xc90 <__vector_13+0x1ca>
     b5a:	4a 9b       	sbis	0x09, 2	; 9
     b5c:	99 c0       	rjmp	.+306    	; 0xc90 <__vector_13+0x1ca>
	// If alarm time is reached and no alarm is in process and alarm is enabled by software and hardware
	{
		alarm_in_process = 1;							// Set the flag
     b5e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <alarm_in_process>
		f_duty_cycle = 0;								// ...
     b62:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <__data_end>
     b66:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <__data_end+0x1>
     b6a:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__data_end+0x2>
     b6e:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <__data_end+0x3>
		OCR1A = 0;										// ... Start PWM fade with a duty cycle of 0%
     b72:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b76:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		duty_cycle_increments = 65536/((alrm_duration*60)/0.004096); // Calculate OCR1A increments based on alrm_duration
     b7a:	60 91 93 02 	lds	r22, 0x0293	; 0x800293 <alrm_duration>
     b7e:	2c e3       	ldi	r18, 0x3C	; 60
     b80:	62 9f       	mul	r22, r18
     b82:	b0 01       	movw	r22, r0
     b84:	11 24       	eor	r1, r1
     b86:	07 2e       	mov	r0, r23
     b88:	00 0c       	add	r0, r0
     b8a:	88 0b       	sbc	r24, r24
     b8c:	99 0b       	sbc	r25, r25
     b8e:	0e 94 3e 08 	call	0x107c	; 0x107c <__floatsisf>
     b92:	2d eb       	ldi	r18, 0xBD	; 189
     b94:	37 e3       	ldi	r19, 0x37	; 55
     b96:	46 e8       	ldi	r20, 0x86	; 134
     b98:	5b e3       	ldi	r21, 0x3B	; 59
     b9a:	0e 94 9b 07 	call	0xf36	; 0xf36 <__divsf3>
     b9e:	9b 01       	movw	r18, r22
     ba0:	ac 01       	movw	r20, r24
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 e8       	ldi	r24, 0x80	; 128
     ba8:	97 e4       	ldi	r25, 0x47	; 71
     baa:	0e 94 9b 07 	call	0xf36	; 0xf36 <__divsf3>
     bae:	60 93 a2 02 	sts	0x02A2, r22	; 0x8002a2 <duty_cycle_increments>
     bb2:	70 93 a3 02 	sts	0x02A3, r23	; 0x8002a3 <duty_cycle_increments+0x1>
     bb6:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <duty_cycle_increments+0x2>
     bba:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <duty_cycle_increments+0x3>
		state = ALARM;									// Go to alarm state
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <state>
	}
	if (alarm_in_process)								// If alarm is in process
     bc4:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <alarm_in_process>
     bc8:	88 23       	and	r24, r24
     bca:	09 f4       	brne	.+2      	; 0xbce <__vector_13+0x108>
     bcc:	61 c0       	rjmp	.+194    	; 0xc90 <__vector_13+0x1ca>
	{
		if (stop_alrm)									// If Pair/stop button is pressed
     bce:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <stop_alrm>
     bd2:	88 23       	and	r24, r24
     bd4:	39 f0       	breq	.+14     	; 0xbe4 <__vector_13+0x11e>
		{
			alarm_in_process = 0;						// Stop the alarm
     bd6:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <alarm_in_process>
			stop_alrm=0;								// Reset flag
     bda:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <stop_alrm>
			state = STANDBY;							// Turn off lamp, go to standby state
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <state>
		}
		if(OCR1A!=65535)f_duty_cycle += duty_cycle_increments; // Increase duty cycle in a float format if it isn't already at maximum
     be4:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     be8:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	d1 f0       	breq	.+52     	; 0xc24 <__vector_13+0x15e>
     bf0:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <duty_cycle_increments>
     bf4:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <duty_cycle_increments+0x1>
     bf8:	40 91 a4 02 	lds	r20, 0x02A4	; 0x8002a4 <duty_cycle_increments+0x2>
     bfc:	50 91 a5 02 	lds	r21, 0x02A5	; 0x8002a5 <duty_cycle_increments+0x3>
     c00:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <__data_end>
     c04:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <__data_end+0x1>
     c08:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end+0x2>
     c0c:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <__data_end+0x3>
     c10:	0e 94 2a 07 	call	0xe54	; 0xe54 <__addsf3>
     c14:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <__data_end>
     c18:	70 93 6d 02 	sts	0x026D, r23	; 0x80026d <__data_end+0x1>
     c1c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end+0x2>
     c20:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <__data_end+0x3>
		if((pow(2,f_duty_cycle/4096)-1) < 65535) 		// Avoid 16bit value overflow
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e8       	ldi	r20, 0x80	; 128
     c2a:	59 e3       	ldi	r21, 0x39	; 57
     c2c:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <__data_end>
     c30:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <__data_end+0x1>
     c34:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end+0x2>
     c38:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <__data_end+0x3>
     c3c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__mulsf3>
     c40:	9b 01       	movw	r18, r22
     c42:	ac 01       	movw	r20, r24
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e4       	ldi	r25, 0x40	; 64
     c4c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <pow>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e8       	ldi	r20, 0x80	; 128
     c56:	5f e3       	ldi	r21, 0x3F	; 63
     c58:	0e 94 29 07 	call	0xe52	; 0xe52 <__subsf3>
     c5c:	6b 01       	movw	r12, r22
     c5e:	7c 01       	movw	r14, r24
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	3f ef       	ldi	r19, 0xFF	; 255
     c64:	4f e7       	ldi	r20, 0x7F	; 127
     c66:	57 e4       	ldi	r21, 0x47	; 71
     c68:	0e 94 96 07 	call	0xf2c	; 0xf2c <__cmpsf2>
     c6c:	88 23       	and	r24, r24
     c6e:	4c f4       	brge	.+18     	; 0xc82 <__vector_13+0x1bc>
			OCR1A = pow(2,f_duty_cycle/4096)-1;			// Converts linear response to "anti-log" (to compensate for eye brightness perception)
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	0e 94 0d 08 	call	0x101a	; 0x101a <__fixunssfsi>
     c78:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c7c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c80:	0c c0       	rjmp	.+24     	; 0xc9a <__vector_13+0x1d4>
														// And Set PWM duty cycle
		else OCR1A = 65535;								// Set duty cycle to 100%
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	9f ef       	ldi	r25, 0xFF	; 255
     c86:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c8a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__vector_13+0x1d4>
	}
	else ADCSRA |= (1<<ADSC);							// Start ADC conversion if no alarm is in process
     c90:	ea e7       	ldi	r30, 0x7A	; 122
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	80 64       	ori	r24, 0x40	; 64
     c98:	80 83       	st	Z, r24
}
     c9a:	ff 91       	pop	r31
     c9c:	ef 91       	pop	r30
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	7f 91       	pop	r23
     ca8:	6f 91       	pop	r22
     caa:	5f 91       	pop	r21
     cac:	4f 91       	pop	r20
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	cf 90       	pop	r12
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	0f 90       	pop	r0
     cc0:	1f 90       	pop	r1
     cc2:	18 95       	reti

00000cc4 <__vector_21>:

ISR(ADC_vect)											// Interrupt on ADC conversion complete
{
     cc4:	1f 92       	push	r1
     cc6:	0f 92       	push	r0
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	4f 93       	push	r20
     cd4:	5f 93       	push	r21
     cd6:	6f 93       	push	r22
     cd8:	7f 93       	push	r23
     cda:	8f 93       	push	r24
     cdc:	9f 93       	push	r25
     cde:	af 93       	push	r26
     ce0:	bf 93       	push	r27
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
	slider = ADC;										// Read ADC value
     ce6:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     cea:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     cee:	70 93 76 02 	sts	0x0276, r23	; 0x800276 <slider+0x1>
     cf2:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <slider>
	OCR1A = pow(2,(float)slider/64)-1;					// Converts linear response to "anti-log" (to compensate for eye brightness perception)
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 3c 08 	call	0x1078	; 0x1078 <__floatunsisf>
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e8       	ldi	r20, 0x80	; 128
     d04:	5c e3       	ldi	r21, 0x3C	; 60
     d06:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__mulsf3>
     d0a:	9b 01       	movw	r18, r22
     d0c:	ac 01       	movw	r20, r24
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e4       	ldi	r25, 0x40	; 64
     d16:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <pow>
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	0e 94 29 07 	call	0xe52	; 0xe52 <__subsf3>
     d26:	0e 94 0d 08 	call	0x101a	; 0x101a <__fixunssfsi>
     d2a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d2e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
														// And Set PWM duty cycle to converted ADC value
}
     d32:	ff 91       	pop	r31
     d34:	ef 91       	pop	r30
     d36:	bf 91       	pop	r27
     d38:	af 91       	pop	r26
     d3a:	9f 91       	pop	r25
     d3c:	8f 91       	pop	r24
     d3e:	7f 91       	pop	r23
     d40:	6f 91       	pop	r22
     d42:	5f 91       	pop	r21
     d44:	4f 91       	pop	r20
     d46:	3f 91       	pop	r19
     d48:	2f 91       	pop	r18
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <__vector_18>:

ISR(USART_RX_vect)										// Interrupt on UART reception complete
{
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
     d5e:	2f 93       	push	r18
     d60:	3f 93       	push	r19
     d62:	4f 93       	push	r20
     d64:	5f 93       	push	r21
     d66:	6f 93       	push	r22
     d68:	7f 93       	push	r23
     d6a:	8f 93       	push	r24
     d6c:	9f 93       	push	r25
     d6e:	af 93       	push	r26
     d70:	bf 93       	push	r27
     d72:	ef 93       	push	r30
     d74:	ff 93       	push	r31
	uint8_t rxdata = UDR0;								// Write received data to rxdata
     d76:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(is_first_byte_received)							// If received byte is the first, as two byte are received by bluetooth each time
     d7a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     d7e:	99 23       	and	r25, r25
     d80:	61 f0       	breq	.+24     	; 0xd9a <__vector_18+0x46>
	{
		id = rxdata >> 3;								// Get only identification variable of received data
     d82:	98 2f       	mov	r25, r24
     d84:	96 95       	lsr	r25
     d86:	96 95       	lsr	r25
     d88:	96 95       	lsr	r25
     d8a:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <id>
		day = rxdata & 0x07;							// Get only day variable of received data
     d8e:	87 70       	andi	r24, 0x07	; 7
     d90:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <day>
		is_first_byte_received = 0;
     d94:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     d98:	05 c0       	rjmp	.+10     	; 0xda4 <__vector_18+0x50>
	}
	else
	{
		data = rxdata;									// Get data
     d9a:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <data>
		is_first_byte_received = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	switch(id)
     da4:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <id>
     da8:	8e 2f       	mov	r24, r30
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	fc 01       	movw	r30, r24
     dae:	31 97       	sbiw	r30, 0x01	; 1
     db0:	e7 30       	cpi	r30, 0x07	; 7
     db2:	f1 05       	cpc	r31, r1
     db4:	d8 f5       	brcc	.+118    	; 0xe2c <__vector_18+0xd8>
     db6:	ec 5c       	subi	r30, 0xCC	; 204
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__tablejump2__>
	{
		case ALRM_EN : alrm_EN[day] = (data & 0x01);	// Assign alarm enable data to alrm_EN array
     dbe:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <day>
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	ec 56       	subi	r30, 0x6C	; 108
     dc6:	fd 4f       	sbci	r31, 0xFD	; 253
     dc8:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
     dcc:	81 70       	andi	r24, 0x01	; 1
     dce:	80 83       	st	Z, r24
		break;
     dd0:	2d c0       	rjmp	.+90     	; 0xe2c <__vector_18+0xd8>
		case ALRM_DUR : alrm_duration = data;			// Assign data to alarm duration variable
     dd2:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
     dd6:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <alrm_duration>
		break;
     dda:	28 c0       	rjmp	.+80     	; 0xe2c <__vector_18+0xd8>
		case ALRM_HR : alrm_hr[day] = data;				// Assign data to alarm hour array
     ddc:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <day>
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	e4 57       	subi	r30, 0x74	; 116
     de4:	fd 4f       	sbci	r31, 0xFD	; 253
     de6:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
     dea:	80 83       	st	Z, r24
		break;
     dec:	1f c0       	rjmp	.+62     	; 0xe2c <__vector_18+0xd8>
		case ALRM_MIN : alrm_min[day] = data;			// Assign data to alarm min array
     dee:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <day>
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	eb 57       	subi	r30, 0x7B	; 123
     df6:	fd 4f       	sbci	r31, 0xFD	; 253
     df8:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
     dfc:	80 83       	st	Z, r24
		break;
     dfe:	16 c0       	rjmp	.+44     	; 0xe2c <__vector_18+0xd8>
		case SET_HR : rtc_set_time_24h(data, actual_min, actual_sec); // Set hour
     e00:	40 91 9c 02 	lds	r20, 0x029C	; 0x80029c <actual_sec>
     e04:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <actual_min>
     e08:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
     e0c:	0e 94 0e 01 	call	0x21c	; 0x21c <rtc_set_time_24h>
		break;
     e10:	0d c0       	rjmp	.+26     	; 0xe2c <__vector_18+0xd8>
		case SET_MIN : rtc_set_time_24h(actual_hour, data, actual_sec);	// Set minute
     e12:	40 91 9c 02 	lds	r20, 0x029C	; 0x80029c <actual_sec>
     e16:	60 91 a0 02 	lds	r22, 0x02A0	; 0x8002a0 <data>
     e1a:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <actual_hour>
     e1e:	0e 94 0e 01 	call	0x21c	; 0x21c <rtc_set_time_24h>
		break;
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <__vector_18+0xd8>
		case SET_DAY : rtc_set_day(data);				// Set day of the week
     e24:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <data>
     e28:	0e 94 69 01 	call	0x2d2	; 0x2d2 <rtc_set_day>
		break;
	}
	write_eeprom_settings();							// Write settings to EEPROM
     e2c:	0e 94 1a 02 	call	0x434	; 0x434 <write_eeprom_settings>
}
     e30:	ff 91       	pop	r31
     e32:	ef 91       	pop	r30
     e34:	bf 91       	pop	r27
     e36:	af 91       	pop	r26
     e38:	9f 91       	pop	r25
     e3a:	8f 91       	pop	r24
     e3c:	7f 91       	pop	r23
     e3e:	6f 91       	pop	r22
     e40:	5f 91       	pop	r21
     e42:	4f 91       	pop	r20
     e44:	3f 91       	pop	r19
     e46:	2f 91       	pop	r18
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0
     e4e:	1f 90       	pop	r1
     e50:	18 95       	reti

00000e52 <__subsf3>:
     e52:	50 58       	subi	r21, 0x80	; 128

00000e54 <__addsf3>:
     e54:	bb 27       	eor	r27, r27
     e56:	aa 27       	eor	r26, r26
     e58:	0e 94 41 07 	call	0xe82	; 0xe82 <__addsf3x>
     e5c:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__fp_round>
     e60:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscA>
     e64:	38 f0       	brcs	.+14     	; 0xe74 <__addsf3+0x20>
     e66:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_pscB>
     e6a:	20 f0       	brcs	.+8      	; 0xe74 <__addsf3+0x20>
     e6c:	39 f4       	brne	.+14     	; 0xe7c <__addsf3+0x28>
     e6e:	9f 3f       	cpi	r25, 0xFF	; 255
     e70:	19 f4       	brne	.+6      	; 0xe78 <__addsf3+0x24>
     e72:	26 f4       	brtc	.+8      	; 0xe7c <__addsf3+0x28>
     e74:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_nan>
     e78:	0e f4       	brtc	.+2      	; 0xe7c <__addsf3+0x28>
     e7a:	e0 95       	com	r30
     e7c:	e7 fb       	bst	r30, 7
     e7e:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>

00000e82 <__addsf3x>:
     e82:	e9 2f       	mov	r30, r25
     e84:	0e 94 c5 08 	call	0x118a	; 0x118a <__fp_split3>
     e88:	58 f3       	brcs	.-42     	; 0xe60 <__addsf3+0xc>
     e8a:	ba 17       	cp	r27, r26
     e8c:	62 07       	cpc	r22, r18
     e8e:	73 07       	cpc	r23, r19
     e90:	84 07       	cpc	r24, r20
     e92:	95 07       	cpc	r25, r21
     e94:	20 f0       	brcs	.+8      	; 0xe9e <__addsf3x+0x1c>
     e96:	79 f4       	brne	.+30     	; 0xeb6 <__addsf3x+0x34>
     e98:	a6 f5       	brtc	.+104    	; 0xf02 <__addsf3x+0x80>
     e9a:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__fp_zero>
     e9e:	0e f4       	brtc	.+2      	; 0xea2 <__addsf3x+0x20>
     ea0:	e0 95       	com	r30
     ea2:	0b 2e       	mov	r0, r27
     ea4:	ba 2f       	mov	r27, r26
     ea6:	a0 2d       	mov	r26, r0
     ea8:	0b 01       	movw	r0, r22
     eaa:	b9 01       	movw	r22, r18
     eac:	90 01       	movw	r18, r0
     eae:	0c 01       	movw	r0, r24
     eb0:	ca 01       	movw	r24, r20
     eb2:	a0 01       	movw	r20, r0
     eb4:	11 24       	eor	r1, r1
     eb6:	ff 27       	eor	r31, r31
     eb8:	59 1b       	sub	r21, r25
     eba:	99 f0       	breq	.+38     	; 0xee2 <__addsf3x+0x60>
     ebc:	59 3f       	cpi	r21, 0xF9	; 249
     ebe:	50 f4       	brcc	.+20     	; 0xed4 <__addsf3x+0x52>
     ec0:	50 3e       	cpi	r21, 0xE0	; 224
     ec2:	68 f1       	brcs	.+90     	; 0xf1e <__addsf3x+0x9c>
     ec4:	1a 16       	cp	r1, r26
     ec6:	f0 40       	sbci	r31, 0x00	; 0
     ec8:	a2 2f       	mov	r26, r18
     eca:	23 2f       	mov	r18, r19
     ecc:	34 2f       	mov	r19, r20
     ece:	44 27       	eor	r20, r20
     ed0:	58 5f       	subi	r21, 0xF8	; 248
     ed2:	f3 cf       	rjmp	.-26     	; 0xeba <__addsf3x+0x38>
     ed4:	46 95       	lsr	r20
     ed6:	37 95       	ror	r19
     ed8:	27 95       	ror	r18
     eda:	a7 95       	ror	r26
     edc:	f0 40       	sbci	r31, 0x00	; 0
     ede:	53 95       	inc	r21
     ee0:	c9 f7       	brne	.-14     	; 0xed4 <__addsf3x+0x52>
     ee2:	7e f4       	brtc	.+30     	; 0xf02 <__addsf3x+0x80>
     ee4:	1f 16       	cp	r1, r31
     ee6:	ba 0b       	sbc	r27, r26
     ee8:	62 0b       	sbc	r22, r18
     eea:	73 0b       	sbc	r23, r19
     eec:	84 0b       	sbc	r24, r20
     eee:	ba f0       	brmi	.+46     	; 0xf1e <__addsf3x+0x9c>
     ef0:	91 50       	subi	r25, 0x01	; 1
     ef2:	a1 f0       	breq	.+40     	; 0xf1c <__addsf3x+0x9a>
     ef4:	ff 0f       	add	r31, r31
     ef6:	bb 1f       	adc	r27, r27
     ef8:	66 1f       	adc	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	88 1f       	adc	r24, r24
     efe:	c2 f7       	brpl	.-16     	; 0xef0 <__addsf3x+0x6e>
     f00:	0e c0       	rjmp	.+28     	; 0xf1e <__addsf3x+0x9c>
     f02:	ba 0f       	add	r27, r26
     f04:	62 1f       	adc	r22, r18
     f06:	73 1f       	adc	r23, r19
     f08:	84 1f       	adc	r24, r20
     f0a:	48 f4       	brcc	.+18     	; 0xf1e <__addsf3x+0x9c>
     f0c:	87 95       	ror	r24
     f0e:	77 95       	ror	r23
     f10:	67 95       	ror	r22
     f12:	b7 95       	ror	r27
     f14:	f7 95       	ror	r31
     f16:	9e 3f       	cpi	r25, 0xFE	; 254
     f18:	08 f0       	brcs	.+2      	; 0xf1c <__addsf3x+0x9a>
     f1a:	b0 cf       	rjmp	.-160    	; 0xe7c <__addsf3+0x28>
     f1c:	93 95       	inc	r25
     f1e:	88 0f       	add	r24, r24
     f20:	08 f0       	brcs	.+2      	; 0xf24 <__addsf3x+0xa2>
     f22:	99 27       	eor	r25, r25
     f24:	ee 0f       	add	r30, r30
     f26:	97 95       	ror	r25
     f28:	87 95       	ror	r24
     f2a:	08 95       	ret

00000f2c <__cmpsf2>:
     f2c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__fp_cmp>
     f30:	08 f4       	brcc	.+2      	; 0xf34 <__cmpsf2+0x8>
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	08 95       	ret

00000f36 <__divsf3>:
     f36:	0e 94 af 07 	call	0xf5e	; 0xf5e <__divsf3x>
     f3a:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__fp_round>
     f3e:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_pscB>
     f42:	58 f0       	brcs	.+22     	; 0xf5a <__divsf3+0x24>
     f44:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscA>
     f48:	40 f0       	brcs	.+16     	; 0xf5a <__divsf3+0x24>
     f4a:	29 f4       	brne	.+10     	; 0xf56 <__divsf3+0x20>
     f4c:	5f 3f       	cpi	r21, 0xFF	; 255
     f4e:	29 f0       	breq	.+10     	; 0xf5a <__divsf3+0x24>
     f50:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>
     f54:	51 11       	cpse	r21, r1
     f56:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_szero>
     f5a:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_nan>

00000f5e <__divsf3x>:
     f5e:	0e 94 c5 08 	call	0x118a	; 0x118a <__fp_split3>
     f62:	68 f3       	brcs	.-38     	; 0xf3e <__divsf3+0x8>

00000f64 <__divsf3_pse>:
     f64:	99 23       	and	r25, r25
     f66:	b1 f3       	breq	.-20     	; 0xf54 <__divsf3+0x1e>
     f68:	55 23       	and	r21, r21
     f6a:	91 f3       	breq	.-28     	; 0xf50 <__divsf3+0x1a>
     f6c:	95 1b       	sub	r25, r21
     f6e:	55 0b       	sbc	r21, r21
     f70:	bb 27       	eor	r27, r27
     f72:	aa 27       	eor	r26, r26
     f74:	62 17       	cp	r22, r18
     f76:	73 07       	cpc	r23, r19
     f78:	84 07       	cpc	r24, r20
     f7a:	38 f0       	brcs	.+14     	; 0xf8a <__divsf3_pse+0x26>
     f7c:	9f 5f       	subi	r25, 0xFF	; 255
     f7e:	5f 4f       	sbci	r21, 0xFF	; 255
     f80:	22 0f       	add	r18, r18
     f82:	33 1f       	adc	r19, r19
     f84:	44 1f       	adc	r20, r20
     f86:	aa 1f       	adc	r26, r26
     f88:	a9 f3       	breq	.-22     	; 0xf74 <__divsf3_pse+0x10>
     f8a:	35 d0       	rcall	.+106    	; 0xff6 <__divsf3_pse+0x92>
     f8c:	0e 2e       	mov	r0, r30
     f8e:	3a f0       	brmi	.+14     	; 0xf9e <__divsf3_pse+0x3a>
     f90:	e0 e8       	ldi	r30, 0x80	; 128
     f92:	32 d0       	rcall	.+100    	; 0xff8 <__divsf3_pse+0x94>
     f94:	91 50       	subi	r25, 0x01	; 1
     f96:	50 40       	sbci	r21, 0x00	; 0
     f98:	e6 95       	lsr	r30
     f9a:	00 1c       	adc	r0, r0
     f9c:	ca f7       	brpl	.-14     	; 0xf90 <__divsf3_pse+0x2c>
     f9e:	2b d0       	rcall	.+86     	; 0xff6 <__divsf3_pse+0x92>
     fa0:	fe 2f       	mov	r31, r30
     fa2:	29 d0       	rcall	.+82     	; 0xff6 <__divsf3_pse+0x92>
     fa4:	66 0f       	add	r22, r22
     fa6:	77 1f       	adc	r23, r23
     fa8:	88 1f       	adc	r24, r24
     faa:	bb 1f       	adc	r27, r27
     fac:	26 17       	cp	r18, r22
     fae:	37 07       	cpc	r19, r23
     fb0:	48 07       	cpc	r20, r24
     fb2:	ab 07       	cpc	r26, r27
     fb4:	b0 e8       	ldi	r27, 0x80	; 128
     fb6:	09 f0       	breq	.+2      	; 0xfba <__divsf3_pse+0x56>
     fb8:	bb 0b       	sbc	r27, r27
     fba:	80 2d       	mov	r24, r0
     fbc:	bf 01       	movw	r22, r30
     fbe:	ff 27       	eor	r31, r31
     fc0:	93 58       	subi	r25, 0x83	; 131
     fc2:	5f 4f       	sbci	r21, 0xFF	; 255
     fc4:	3a f0       	brmi	.+14     	; 0xfd4 <__divsf3_pse+0x70>
     fc6:	9e 3f       	cpi	r25, 0xFE	; 254
     fc8:	51 05       	cpc	r21, r1
     fca:	78 f0       	brcs	.+30     	; 0xfea <__divsf3_pse+0x86>
     fcc:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>
     fd0:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_szero>
     fd4:	5f 3f       	cpi	r21, 0xFF	; 255
     fd6:	e4 f3       	brlt	.-8      	; 0xfd0 <__divsf3_pse+0x6c>
     fd8:	98 3e       	cpi	r25, 0xE8	; 232
     fda:	d4 f3       	brlt	.-12     	; 0xfd0 <__divsf3_pse+0x6c>
     fdc:	86 95       	lsr	r24
     fde:	77 95       	ror	r23
     fe0:	67 95       	ror	r22
     fe2:	b7 95       	ror	r27
     fe4:	f7 95       	ror	r31
     fe6:	9f 5f       	subi	r25, 0xFF	; 255
     fe8:	c9 f7       	brne	.-14     	; 0xfdc <__divsf3_pse+0x78>
     fea:	88 0f       	add	r24, r24
     fec:	91 1d       	adc	r25, r1
     fee:	96 95       	lsr	r25
     ff0:	87 95       	ror	r24
     ff2:	97 f9       	bld	r25, 7
     ff4:	08 95       	ret
     ff6:	e1 e0       	ldi	r30, 0x01	; 1
     ff8:	66 0f       	add	r22, r22
     ffa:	77 1f       	adc	r23, r23
     ffc:	88 1f       	adc	r24, r24
     ffe:	bb 1f       	adc	r27, r27
    1000:	62 17       	cp	r22, r18
    1002:	73 07       	cpc	r23, r19
    1004:	84 07       	cpc	r24, r20
    1006:	ba 07       	cpc	r27, r26
    1008:	20 f0       	brcs	.+8      	; 0x1012 <__divsf3_pse+0xae>
    100a:	62 1b       	sub	r22, r18
    100c:	73 0b       	sbc	r23, r19
    100e:	84 0b       	sbc	r24, r20
    1010:	ba 0b       	sbc	r27, r26
    1012:	ee 1f       	adc	r30, r30
    1014:	88 f7       	brcc	.-30     	; 0xff8 <__divsf3_pse+0x94>
    1016:	e0 95       	com	r30
    1018:	08 95       	ret

0000101a <__fixunssfsi>:
    101a:	0e 94 cd 08 	call	0x119a	; 0x119a <__fp_splitA>
    101e:	88 f0       	brcs	.+34     	; 0x1042 <__fixunssfsi+0x28>
    1020:	9f 57       	subi	r25, 0x7F	; 127
    1022:	98 f0       	brcs	.+38     	; 0x104a <__fixunssfsi+0x30>
    1024:	b9 2f       	mov	r27, r25
    1026:	99 27       	eor	r25, r25
    1028:	b7 51       	subi	r27, 0x17	; 23
    102a:	b0 f0       	brcs	.+44     	; 0x1058 <__fixunssfsi+0x3e>
    102c:	e1 f0       	breq	.+56     	; 0x1066 <__fixunssfsi+0x4c>
    102e:	66 0f       	add	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	88 1f       	adc	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	1a f0       	brmi	.+6      	; 0x103e <__fixunssfsi+0x24>
    1038:	ba 95       	dec	r27
    103a:	c9 f7       	brne	.-14     	; 0x102e <__fixunssfsi+0x14>
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <__fixunssfsi+0x4c>
    103e:	b1 30       	cpi	r27, 0x01	; 1
    1040:	91 f0       	breq	.+36     	; 0x1066 <__fixunssfsi+0x4c>
    1042:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__fp_zero>
    1046:	b1 e0       	ldi	r27, 0x01	; 1
    1048:	08 95       	ret
    104a:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__fp_zero>
    104e:	67 2f       	mov	r22, r23
    1050:	78 2f       	mov	r23, r24
    1052:	88 27       	eor	r24, r24
    1054:	b8 5f       	subi	r27, 0xF8	; 248
    1056:	39 f0       	breq	.+14     	; 0x1066 <__fixunssfsi+0x4c>
    1058:	b9 3f       	cpi	r27, 0xF9	; 249
    105a:	cc f3       	brlt	.-14     	; 0x104e <__fixunssfsi+0x34>
    105c:	86 95       	lsr	r24
    105e:	77 95       	ror	r23
    1060:	67 95       	ror	r22
    1062:	b3 95       	inc	r27
    1064:	d9 f7       	brne	.-10     	; 0x105c <__fixunssfsi+0x42>
    1066:	3e f4       	brtc	.+14     	; 0x1076 <__fixunssfsi+0x5c>
    1068:	90 95       	com	r25
    106a:	80 95       	com	r24
    106c:	70 95       	com	r23
    106e:	61 95       	neg	r22
    1070:	7f 4f       	sbci	r23, 0xFF	; 255
    1072:	8f 4f       	sbci	r24, 0xFF	; 255
    1074:	9f 4f       	sbci	r25, 0xFF	; 255
    1076:	08 95       	ret

00001078 <__floatunsisf>:
    1078:	e8 94       	clt
    107a:	09 c0       	rjmp	.+18     	; 0x108e <__floatsisf+0x12>

0000107c <__floatsisf>:
    107c:	97 fb       	bst	r25, 7
    107e:	3e f4       	brtc	.+14     	; 0x108e <__floatsisf+0x12>
    1080:	90 95       	com	r25
    1082:	80 95       	com	r24
    1084:	70 95       	com	r23
    1086:	61 95       	neg	r22
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	8f 4f       	sbci	r24, 0xFF	; 255
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	99 23       	and	r25, r25
    1090:	a9 f0       	breq	.+42     	; 0x10bc <__floatsisf+0x40>
    1092:	f9 2f       	mov	r31, r25
    1094:	96 e9       	ldi	r25, 0x96	; 150
    1096:	bb 27       	eor	r27, r27
    1098:	93 95       	inc	r25
    109a:	f6 95       	lsr	r31
    109c:	87 95       	ror	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b7 95       	ror	r27
    10a4:	f1 11       	cpse	r31, r1
    10a6:	f8 cf       	rjmp	.-16     	; 0x1098 <__floatsisf+0x1c>
    10a8:	fa f4       	brpl	.+62     	; 0x10e8 <__floatsisf+0x6c>
    10aa:	bb 0f       	add	r27, r27
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <__floatsisf+0x36>
    10ae:	60 ff       	sbrs	r22, 0
    10b0:	1b c0       	rjmp	.+54     	; 0x10e8 <__floatsisf+0x6c>
    10b2:	6f 5f       	subi	r22, 0xFF	; 255
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255
    10b6:	8f 4f       	sbci	r24, 0xFF	; 255
    10b8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ba:	16 c0       	rjmp	.+44     	; 0x10e8 <__floatsisf+0x6c>
    10bc:	88 23       	and	r24, r24
    10be:	11 f0       	breq	.+4      	; 0x10c4 <__floatsisf+0x48>
    10c0:	96 e9       	ldi	r25, 0x96	; 150
    10c2:	11 c0       	rjmp	.+34     	; 0x10e6 <__floatsisf+0x6a>
    10c4:	77 23       	and	r23, r23
    10c6:	21 f0       	breq	.+8      	; 0x10d0 <__floatsisf+0x54>
    10c8:	9e e8       	ldi	r25, 0x8E	; 142
    10ca:	87 2f       	mov	r24, r23
    10cc:	76 2f       	mov	r23, r22
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <__floatsisf+0x5e>
    10d0:	66 23       	and	r22, r22
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <__floatsisf+0x74>
    10d4:	96 e8       	ldi	r25, 0x86	; 134
    10d6:	86 2f       	mov	r24, r22
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	2a f0       	brmi	.+10     	; 0x10e8 <__floatsisf+0x6c>
    10de:	9a 95       	dec	r25
    10e0:	66 0f       	add	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	da f7       	brpl	.-10     	; 0x10de <__floatsisf+0x62>
    10e8:	88 0f       	add	r24, r24
    10ea:	96 95       	lsr	r25
    10ec:	87 95       	ror	r24
    10ee:	97 f9       	bld	r25, 7
    10f0:	08 95       	ret

000010f2 <__fp_cmp>:
    10f2:	99 0f       	add	r25, r25
    10f4:	00 08       	sbc	r0, r0
    10f6:	55 0f       	add	r21, r21
    10f8:	aa 0b       	sbc	r26, r26
    10fa:	e0 e8       	ldi	r30, 0x80	; 128
    10fc:	fe ef       	ldi	r31, 0xFE	; 254
    10fe:	16 16       	cp	r1, r22
    1100:	17 06       	cpc	r1, r23
    1102:	e8 07       	cpc	r30, r24
    1104:	f9 07       	cpc	r31, r25
    1106:	c0 f0       	brcs	.+48     	; 0x1138 <__fp_cmp+0x46>
    1108:	12 16       	cp	r1, r18
    110a:	13 06       	cpc	r1, r19
    110c:	e4 07       	cpc	r30, r20
    110e:	f5 07       	cpc	r31, r21
    1110:	98 f0       	brcs	.+38     	; 0x1138 <__fp_cmp+0x46>
    1112:	62 1b       	sub	r22, r18
    1114:	73 0b       	sbc	r23, r19
    1116:	84 0b       	sbc	r24, r20
    1118:	95 0b       	sbc	r25, r21
    111a:	39 f4       	brne	.+14     	; 0x112a <__fp_cmp+0x38>
    111c:	0a 26       	eor	r0, r26
    111e:	61 f0       	breq	.+24     	; 0x1138 <__fp_cmp+0x46>
    1120:	23 2b       	or	r18, r19
    1122:	24 2b       	or	r18, r20
    1124:	25 2b       	or	r18, r21
    1126:	21 f4       	brne	.+8      	; 0x1130 <__fp_cmp+0x3e>
    1128:	08 95       	ret
    112a:	0a 26       	eor	r0, r26
    112c:	09 f4       	brne	.+2      	; 0x1130 <__fp_cmp+0x3e>
    112e:	a1 40       	sbci	r26, 0x01	; 1
    1130:	a6 95       	lsr	r26
    1132:	8f ef       	ldi	r24, 0xFF	; 255
    1134:	81 1d       	adc	r24, r1
    1136:	81 1d       	adc	r24, r1
    1138:	08 95       	ret

0000113a <__fp_inf>:
    113a:	97 f9       	bld	r25, 7
    113c:	9f 67       	ori	r25, 0x7F	; 127
    113e:	80 e8       	ldi	r24, 0x80	; 128
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	08 95       	ret

00001146 <__fp_nan>:
    1146:	9f ef       	ldi	r25, 0xFF	; 255
    1148:	80 ec       	ldi	r24, 0xC0	; 192
    114a:	08 95       	ret

0000114c <__fp_pscA>:
    114c:	00 24       	eor	r0, r0
    114e:	0a 94       	dec	r0
    1150:	16 16       	cp	r1, r22
    1152:	17 06       	cpc	r1, r23
    1154:	18 06       	cpc	r1, r24
    1156:	09 06       	cpc	r0, r25
    1158:	08 95       	ret

0000115a <__fp_pscB>:
    115a:	00 24       	eor	r0, r0
    115c:	0a 94       	dec	r0
    115e:	12 16       	cp	r1, r18
    1160:	13 06       	cpc	r1, r19
    1162:	14 06       	cpc	r1, r20
    1164:	05 06       	cpc	r0, r21
    1166:	08 95       	ret

00001168 <__fp_round>:
    1168:	09 2e       	mov	r0, r25
    116a:	03 94       	inc	r0
    116c:	00 0c       	add	r0, r0
    116e:	11 f4       	brne	.+4      	; 0x1174 <__fp_round+0xc>
    1170:	88 23       	and	r24, r24
    1172:	52 f0       	brmi	.+20     	; 0x1188 <__fp_round+0x20>
    1174:	bb 0f       	add	r27, r27
    1176:	40 f4       	brcc	.+16     	; 0x1188 <__fp_round+0x20>
    1178:	bf 2b       	or	r27, r31
    117a:	11 f4       	brne	.+4      	; 0x1180 <__fp_round+0x18>
    117c:	60 ff       	sbrs	r22, 0
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <__fp_round+0x20>
    1180:	6f 5f       	subi	r22, 0xFF	; 255
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	8f 4f       	sbci	r24, 0xFF	; 255
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	08 95       	ret

0000118a <__fp_split3>:
    118a:	57 fd       	sbrc	r21, 7
    118c:	90 58       	subi	r25, 0x80	; 128
    118e:	44 0f       	add	r20, r20
    1190:	55 1f       	adc	r21, r21
    1192:	59 f0       	breq	.+22     	; 0x11aa <__fp_splitA+0x10>
    1194:	5f 3f       	cpi	r21, 0xFF	; 255
    1196:	71 f0       	breq	.+28     	; 0x11b4 <__fp_splitA+0x1a>
    1198:	47 95       	ror	r20

0000119a <__fp_splitA>:
    119a:	88 0f       	add	r24, r24
    119c:	97 fb       	bst	r25, 7
    119e:	99 1f       	adc	r25, r25
    11a0:	61 f0       	breq	.+24     	; 0x11ba <__fp_splitA+0x20>
    11a2:	9f 3f       	cpi	r25, 0xFF	; 255
    11a4:	79 f0       	breq	.+30     	; 0x11c4 <__fp_splitA+0x2a>
    11a6:	87 95       	ror	r24
    11a8:	08 95       	ret
    11aa:	12 16       	cp	r1, r18
    11ac:	13 06       	cpc	r1, r19
    11ae:	14 06       	cpc	r1, r20
    11b0:	55 1f       	adc	r21, r21
    11b2:	f2 cf       	rjmp	.-28     	; 0x1198 <__fp_split3+0xe>
    11b4:	46 95       	lsr	r20
    11b6:	f1 df       	rcall	.-30     	; 0x119a <__fp_splitA>
    11b8:	08 c0       	rjmp	.+16     	; 0x11ca <__fp_splitA+0x30>
    11ba:	16 16       	cp	r1, r22
    11bc:	17 06       	cpc	r1, r23
    11be:	18 06       	cpc	r1, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	f1 cf       	rjmp	.-30     	; 0x11a6 <__fp_splitA+0xc>
    11c4:	86 95       	lsr	r24
    11c6:	71 05       	cpc	r23, r1
    11c8:	61 05       	cpc	r22, r1
    11ca:	08 94       	sec
    11cc:	08 95       	ret

000011ce <__fp_zero>:
    11ce:	e8 94       	clt

000011d0 <__fp_szero>:
    11d0:	bb 27       	eor	r27, r27
    11d2:	66 27       	eor	r22, r22
    11d4:	77 27       	eor	r23, r23
    11d6:	cb 01       	movw	r24, r22
    11d8:	97 f9       	bld	r25, 7
    11da:	08 95       	ret

000011dc <__mulsf3>:
    11dc:	0e 94 01 09 	call	0x1202	; 0x1202 <__mulsf3x>
    11e0:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__fp_round>
    11e4:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscA>
    11e8:	38 f0       	brcs	.+14     	; 0x11f8 <__mulsf3+0x1c>
    11ea:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_pscB>
    11ee:	20 f0       	brcs	.+8      	; 0x11f8 <__mulsf3+0x1c>
    11f0:	95 23       	and	r25, r21
    11f2:	11 f0       	breq	.+4      	; 0x11f8 <__mulsf3+0x1c>
    11f4:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>
    11f8:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_nan>
    11fc:	11 24       	eor	r1, r1
    11fe:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_szero>

00001202 <__mulsf3x>:
    1202:	0e 94 c5 08 	call	0x118a	; 0x118a <__fp_split3>
    1206:	70 f3       	brcs	.-36     	; 0x11e4 <__mulsf3+0x8>

00001208 <__mulsf3_pse>:
    1208:	95 9f       	mul	r25, r21
    120a:	c1 f3       	breq	.-16     	; 0x11fc <__mulsf3+0x20>
    120c:	95 0f       	add	r25, r21
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	55 1f       	adc	r21, r21
    1212:	62 9f       	mul	r22, r18
    1214:	f0 01       	movw	r30, r0
    1216:	72 9f       	mul	r23, r18
    1218:	bb 27       	eor	r27, r27
    121a:	f0 0d       	add	r31, r0
    121c:	b1 1d       	adc	r27, r1
    121e:	63 9f       	mul	r22, r19
    1220:	aa 27       	eor	r26, r26
    1222:	f0 0d       	add	r31, r0
    1224:	b1 1d       	adc	r27, r1
    1226:	aa 1f       	adc	r26, r26
    1228:	64 9f       	mul	r22, r20
    122a:	66 27       	eor	r22, r22
    122c:	b0 0d       	add	r27, r0
    122e:	a1 1d       	adc	r26, r1
    1230:	66 1f       	adc	r22, r22
    1232:	82 9f       	mul	r24, r18
    1234:	22 27       	eor	r18, r18
    1236:	b0 0d       	add	r27, r0
    1238:	a1 1d       	adc	r26, r1
    123a:	62 1f       	adc	r22, r18
    123c:	73 9f       	mul	r23, r19
    123e:	b0 0d       	add	r27, r0
    1240:	a1 1d       	adc	r26, r1
    1242:	62 1f       	adc	r22, r18
    1244:	83 9f       	mul	r24, r19
    1246:	a0 0d       	add	r26, r0
    1248:	61 1d       	adc	r22, r1
    124a:	22 1f       	adc	r18, r18
    124c:	74 9f       	mul	r23, r20
    124e:	33 27       	eor	r19, r19
    1250:	a0 0d       	add	r26, r0
    1252:	61 1d       	adc	r22, r1
    1254:	23 1f       	adc	r18, r19
    1256:	84 9f       	mul	r24, r20
    1258:	60 0d       	add	r22, r0
    125a:	21 1d       	adc	r18, r1
    125c:	82 2f       	mov	r24, r18
    125e:	76 2f       	mov	r23, r22
    1260:	6a 2f       	mov	r22, r26
    1262:	11 24       	eor	r1, r1
    1264:	9f 57       	subi	r25, 0x7F	; 127
    1266:	50 40       	sbci	r21, 0x00	; 0
    1268:	9a f0       	brmi	.+38     	; 0x1290 <__mulsf3_pse+0x88>
    126a:	f1 f0       	breq	.+60     	; 0x12a8 <__mulsf3_pse+0xa0>
    126c:	88 23       	and	r24, r24
    126e:	4a f0       	brmi	.+18     	; 0x1282 <__mulsf3_pse+0x7a>
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	bb 1f       	adc	r27, r27
    1276:	66 1f       	adc	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	91 50       	subi	r25, 0x01	; 1
    127e:	50 40       	sbci	r21, 0x00	; 0
    1280:	a9 f7       	brne	.-22     	; 0x126c <__mulsf3_pse+0x64>
    1282:	9e 3f       	cpi	r25, 0xFE	; 254
    1284:	51 05       	cpc	r21, r1
    1286:	80 f0       	brcs	.+32     	; 0x12a8 <__mulsf3_pse+0xa0>
    1288:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>
    128c:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_szero>
    1290:	5f 3f       	cpi	r21, 0xFF	; 255
    1292:	e4 f3       	brlt	.-8      	; 0x128c <__mulsf3_pse+0x84>
    1294:	98 3e       	cpi	r25, 0xE8	; 232
    1296:	d4 f3       	brlt	.-12     	; 0x128c <__mulsf3_pse+0x84>
    1298:	86 95       	lsr	r24
    129a:	77 95       	ror	r23
    129c:	67 95       	ror	r22
    129e:	b7 95       	ror	r27
    12a0:	f7 95       	ror	r31
    12a2:	e7 95       	ror	r30
    12a4:	9f 5f       	subi	r25, 0xFF	; 255
    12a6:	c1 f7       	brne	.-16     	; 0x1298 <__mulsf3_pse+0x90>
    12a8:	fe 2b       	or	r31, r30
    12aa:	88 0f       	add	r24, r24
    12ac:	91 1d       	adc	r25, r1
    12ae:	96 95       	lsr	r25
    12b0:	87 95       	ror	r24
    12b2:	97 f9       	bld	r25, 7
    12b4:	08 95       	ret

000012b6 <pow>:
    12b6:	fa 01       	movw	r30, r20
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	30 96       	adiw	r30, 0x00	; 0
    12be:	21 05       	cpc	r18, r1
    12c0:	31 05       	cpc	r19, r1
    12c2:	a1 f1       	breq	.+104    	; 0x132c <pow+0x76>
    12c4:	61 15       	cp	r22, r1
    12c6:	71 05       	cpc	r23, r1
    12c8:	61 f4       	brne	.+24     	; 0x12e2 <pow+0x2c>
    12ca:	80 38       	cpi	r24, 0x80	; 128
    12cc:	bf e3       	ldi	r27, 0x3F	; 63
    12ce:	9b 07       	cpc	r25, r27
    12d0:	49 f1       	breq	.+82     	; 0x1324 <pow+0x6e>
    12d2:	68 94       	set
    12d4:	90 38       	cpi	r25, 0x80	; 128
    12d6:	81 05       	cpc	r24, r1
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <pow+0x3c>
    12da:	80 38       	cpi	r24, 0x80	; 128
    12dc:	bf ef       	ldi	r27, 0xFF	; 255
    12de:	9b 07       	cpc	r25, r27
    12e0:	41 f0       	breq	.+16     	; 0x12f2 <pow+0x3c>
    12e2:	99 23       	and	r25, r25
    12e4:	4a f5       	brpl	.+82     	; 0x1338 <pow+0x82>
    12e6:	ff 3f       	cpi	r31, 0xFF	; 255
    12e8:	e1 05       	cpc	r30, r1
    12ea:	31 05       	cpc	r19, r1
    12ec:	21 05       	cpc	r18, r1
    12ee:	19 f1       	breq	.+70     	; 0x1336 <pow+0x80>
    12f0:	e8 94       	clt
    12f2:	08 94       	sec
    12f4:	e7 95       	ror	r30
    12f6:	d9 01       	movw	r26, r18
    12f8:	aa 23       	and	r26, r26
    12fa:	29 f4       	brne	.+10     	; 0x1306 <pow+0x50>
    12fc:	ab 2f       	mov	r26, r27
    12fe:	be 2f       	mov	r27, r30
    1300:	f8 5f       	subi	r31, 0xF8	; 248
    1302:	d0 f3       	brcs	.-12     	; 0x12f8 <pow+0x42>
    1304:	10 c0       	rjmp	.+32     	; 0x1326 <pow+0x70>
    1306:	ff 5f       	subi	r31, 0xFF	; 255
    1308:	70 f4       	brcc	.+28     	; 0x1326 <pow+0x70>
    130a:	a6 95       	lsr	r26
    130c:	e0 f7       	brcc	.-8      	; 0x1306 <pow+0x50>
    130e:	f7 39       	cpi	r31, 0x97	; 151
    1310:	50 f0       	brcs	.+20     	; 0x1326 <pow+0x70>
    1312:	19 f0       	breq	.+6      	; 0x131a <pow+0x64>
    1314:	ff 3a       	cpi	r31, 0xAF	; 175
    1316:	38 f4       	brcc	.+14     	; 0x1326 <pow+0x70>
    1318:	9f 77       	andi	r25, 0x7F	; 127
    131a:	9f 93       	push	r25
    131c:	0d d0       	rcall	.+26     	; 0x1338 <pow+0x82>
    131e:	0f 90       	pop	r0
    1320:	07 fc       	sbrc	r0, 7
    1322:	90 58       	subi	r25, 0x80	; 128
    1324:	08 95       	ret
    1326:	46 f0       	brts	.+16     	; 0x1338 <pow+0x82>
    1328:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_nan>
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	80 e8       	ldi	r24, 0x80	; 128
    1332:	9f e3       	ldi	r25, 0x3F	; 63
    1334:	08 95       	ret
    1336:	4f e7       	ldi	r20, 0x7F	; 127
    1338:	9f 77       	andi	r25, 0x7F	; 127
    133a:	5f 93       	push	r21
    133c:	4f 93       	push	r20
    133e:	3f 93       	push	r19
    1340:	2f 93       	push	r18
    1342:	0e 94 56 0a 	call	0x14ac	; 0x14ac <log>
    1346:	2f 91       	pop	r18
    1348:	3f 91       	pop	r19
    134a:	4f 91       	pop	r20
    134c:	5f 91       	pop	r21
    134e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__mulsf3>
    1352:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <exp>
    1356:	29 f4       	brne	.+10     	; 0x1362 <pow+0xac>
    1358:	16 f0       	brts	.+4      	; 0x135e <pow+0xa8>
    135a:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>
    135e:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__fp_zero>
    1362:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_nan>

00001366 <exp>:
    1366:	0e 94 cd 08 	call	0x119a	; 0x119a <__fp_splitA>
    136a:	a8 f3       	brcs	.-22     	; 0x1356 <pow+0xa0>
    136c:	96 38       	cpi	r25, 0x86	; 134
    136e:	a0 f7       	brcc	.-24     	; 0x1358 <pow+0xa2>
    1370:	07 f8       	bld	r0, 7
    1372:	0f 92       	push	r0
    1374:	e8 94       	clt
    1376:	2b e3       	ldi	r18, 0x3B	; 59
    1378:	3a ea       	ldi	r19, 0xAA	; 170
    137a:	48 eb       	ldi	r20, 0xB8	; 184
    137c:	5f e7       	ldi	r21, 0x7F	; 127
    137e:	0e 94 04 09 	call	0x1208	; 0x1208 <__mulsf3_pse>
    1382:	0f 92       	push	r0
    1384:	0f 92       	push	r0
    1386:	0f 92       	push	r0
    1388:	4d b7       	in	r20, 0x3d	; 61
    138a:	5e b7       	in	r21, 0x3e	; 62
    138c:	0f 92       	push	r0
    138e:	0e 94 9e 0a 	call	0x153c	; 0x153c <modf>
    1392:	e6 e7       	ldi	r30, 0x76	; 118
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fp_powser>
    139a:	4f 91       	pop	r20
    139c:	5f 91       	pop	r21
    139e:	ef 91       	pop	r30
    13a0:	ff 91       	pop	r31
    13a2:	e5 95       	asr	r30
    13a4:	ee 1f       	adc	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	49 f0       	breq	.+18     	; 0x13bc <exp+0x56>
    13aa:	fe 57       	subi	r31, 0x7E	; 126
    13ac:	e0 68       	ori	r30, 0x80	; 128
    13ae:	44 27       	eor	r20, r20
    13b0:	ee 0f       	add	r30, r30
    13b2:	44 1f       	adc	r20, r20
    13b4:	fa 95       	dec	r31
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <exp+0x4a>
    13b8:	41 95       	neg	r20
    13ba:	55 0b       	sbc	r21, r21
    13bc:	0e 94 18 0a 	call	0x1430	; 0x1430 <ldexp>
    13c0:	0f 90       	pop	r0
    13c2:	07 fe       	sbrs	r0, 7
    13c4:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <inverse>
    13c8:	08 95       	ret

000013ca <__fp_powser>:
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	1f 93       	push	r17
    13d0:	0f 93       	push	r16
    13d2:	ff 92       	push	r15
    13d4:	ef 92       	push	r14
    13d6:	df 92       	push	r13
    13d8:	7b 01       	movw	r14, r22
    13da:	8c 01       	movw	r16, r24
    13dc:	68 94       	set
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <__fp_powser+0x22>
    13e0:	da 2e       	mov	r13, r26
    13e2:	ef 01       	movw	r28, r30
    13e4:	0e 94 01 09 	call	0x1202	; 0x1202 <__mulsf3x>
    13e8:	fe 01       	movw	r30, r28
    13ea:	e8 94       	clt
    13ec:	a5 91       	lpm	r26, Z+
    13ee:	25 91       	lpm	r18, Z+
    13f0:	35 91       	lpm	r19, Z+
    13f2:	45 91       	lpm	r20, Z+
    13f4:	55 91       	lpm	r21, Z+
    13f6:	a6 f3       	brts	.-24     	; 0x13e0 <__fp_powser+0x16>
    13f8:	ef 01       	movw	r28, r30
    13fa:	0e 94 41 07 	call	0xe82	; 0xe82 <__addsf3x>
    13fe:	fe 01       	movw	r30, r28
    1400:	97 01       	movw	r18, r14
    1402:	a8 01       	movw	r20, r16
    1404:	da 94       	dec	r13
    1406:	69 f7       	brne	.-38     	; 0x13e2 <__fp_powser+0x18>
    1408:	df 90       	pop	r13
    140a:	ef 90       	pop	r14
    140c:	ff 90       	pop	r15
    140e:	0f 91       	pop	r16
    1410:	1f 91       	pop	r17
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <inverse>:
    1418:	9b 01       	movw	r18, r22
    141a:	ac 01       	movw	r20, r24
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	80 e8       	ldi	r24, 0x80	; 128
    1422:	9f e3       	ldi	r25, 0x3F	; 63
    1424:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__divsf3>
    1428:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>
    142c:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__fp_mpack>

00001430 <ldexp>:
    1430:	0e 94 cd 08 	call	0x119a	; 0x119a <__fp_splitA>
    1434:	d8 f3       	brcs	.-10     	; 0x142c <inverse+0x14>
    1436:	99 23       	and	r25, r25
    1438:	c9 f3       	breq	.-14     	; 0x142c <inverse+0x14>
    143a:	94 0f       	add	r25, r20
    143c:	51 1d       	adc	r21, r1
    143e:	a3 f3       	brvs	.-24     	; 0x1428 <inverse+0x10>
    1440:	91 50       	subi	r25, 0x01	; 1
    1442:	50 40       	sbci	r21, 0x00	; 0
    1444:	94 f0       	brlt	.+36     	; 0x146a <ldexp+0x3a>
    1446:	59 f0       	breq	.+22     	; 0x145e <ldexp+0x2e>
    1448:	88 23       	and	r24, r24
    144a:	32 f0       	brmi	.+12     	; 0x1458 <ldexp+0x28>
    144c:	66 0f       	add	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	88 1f       	adc	r24, r24
    1452:	91 50       	subi	r25, 0x01	; 1
    1454:	50 40       	sbci	r21, 0x00	; 0
    1456:	c1 f7       	brne	.-16     	; 0x1448 <ldexp+0x18>
    1458:	9e 3f       	cpi	r25, 0xFE	; 254
    145a:	51 05       	cpc	r21, r1
    145c:	2c f7       	brge	.-54     	; 0x1428 <inverse+0x10>
    145e:	88 0f       	add	r24, r24
    1460:	91 1d       	adc	r25, r1
    1462:	96 95       	lsr	r25
    1464:	87 95       	ror	r24
    1466:	97 f9       	bld	r25, 7
    1468:	08 95       	ret
    146a:	5f 3f       	cpi	r21, 0xFF	; 255
    146c:	ac f0       	brlt	.+42     	; 0x1498 <ldexp+0x68>
    146e:	98 3e       	cpi	r25, 0xE8	; 232
    1470:	9c f0       	brlt	.+38     	; 0x1498 <ldexp+0x68>
    1472:	bb 27       	eor	r27, r27
    1474:	86 95       	lsr	r24
    1476:	77 95       	ror	r23
    1478:	67 95       	ror	r22
    147a:	b7 95       	ror	r27
    147c:	08 f4       	brcc	.+2      	; 0x1480 <ldexp+0x50>
    147e:	b1 60       	ori	r27, 0x01	; 1
    1480:	93 95       	inc	r25
    1482:	c1 f7       	brne	.-16     	; 0x1474 <ldexp+0x44>
    1484:	bb 0f       	add	r27, r27
    1486:	58 f7       	brcc	.-42     	; 0x145e <ldexp+0x2e>
    1488:	11 f4       	brne	.+4      	; 0x148e <ldexp+0x5e>
    148a:	60 ff       	sbrs	r22, 0
    148c:	e8 cf       	rjmp	.-48     	; 0x145e <ldexp+0x2e>
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	8f 4f       	sbci	r24, 0xFF	; 255
    1494:	9f 4f       	sbci	r25, 0xFF	; 255
    1496:	e3 cf       	rjmp	.-58     	; 0x145e <ldexp+0x2e>
    1498:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_szero>
    149c:	16 f0       	brts	.+4      	; 0x14a2 <ldexp+0x72>
    149e:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__fp_mpack>
    14a2:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_nan>
    14a6:	68 94       	set
    14a8:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__fp_inf>

000014ac <log>:
    14ac:	0e 94 cd 08 	call	0x119a	; 0x119a <__fp_splitA>
    14b0:	a8 f3       	brcs	.-22     	; 0x149c <ldexp+0x6c>
    14b2:	99 23       	and	r25, r25
    14b4:	c1 f3       	breq	.-16     	; 0x14a6 <ldexp+0x76>
    14b6:	ae f3       	brts	.-22     	; 0x14a2 <ldexp+0x72>
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	1f 93       	push	r17
    14be:	0f 93       	push	r16
    14c0:	ff 92       	push	r15
    14c2:	c9 2f       	mov	r28, r25
    14c4:	dd 27       	eor	r29, r29
    14c6:	88 23       	and	r24, r24
    14c8:	2a f0       	brmi	.+10     	; 0x14d4 <log+0x28>
    14ca:	21 97       	sbiw	r28, 0x01	; 1
    14cc:	66 0f       	add	r22, r22
    14ce:	77 1f       	adc	r23, r23
    14d0:	88 1f       	adc	r24, r24
    14d2:	da f7       	brpl	.-10     	; 0x14ca <log+0x1e>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f eb       	ldi	r21, 0xBF	; 191
    14dc:	9f e3       	ldi	r25, 0x3F	; 63
    14de:	88 39       	cpi	r24, 0x98	; 152
    14e0:	20 f0       	brcs	.+8      	; 0x14ea <log+0x3e>
    14e2:	80 3e       	cpi	r24, 0xE0	; 224
    14e4:	38 f0       	brcs	.+14     	; 0x14f4 <log+0x48>
    14e6:	21 96       	adiw	r28, 0x01	; 1
    14e8:	8f 77       	andi	r24, 0x7F	; 127
    14ea:	0e 94 2a 07 	call	0xe54	; 0xe54 <__addsf3>
    14ee:	ee e9       	ldi	r30, 0x9E	; 158
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <log+0x50>
    14f4:	0e 94 2a 07 	call	0xe54	; 0xe54 <__addsf3>
    14f8:	eb ec       	ldi	r30, 0xCB	; 203
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fp_powser>
    1500:	8b 01       	movw	r16, r22
    1502:	be 01       	movw	r22, r28
    1504:	ec 01       	movw	r28, r24
    1506:	fb 2e       	mov	r15, r27
    1508:	6f 57       	subi	r22, 0x7F	; 127
    150a:	71 09       	sbc	r23, r1
    150c:	75 95       	asr	r23
    150e:	77 1f       	adc	r23, r23
    1510:	88 0b       	sbc	r24, r24
    1512:	99 0b       	sbc	r25, r25
    1514:	0e 94 3e 08 	call	0x107c	; 0x107c <__floatsisf>
    1518:	28 e1       	ldi	r18, 0x18	; 24
    151a:	32 e7       	ldi	r19, 0x72	; 114
    151c:	41 e3       	ldi	r20, 0x31	; 49
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	0e 94 01 09 	call	0x1202	; 0x1202 <__mulsf3x>
    1524:	af 2d       	mov	r26, r15
    1526:	98 01       	movw	r18, r16
    1528:	ae 01       	movw	r20, r28
    152a:	ff 90       	pop	r15
    152c:	0f 91       	pop	r16
    152e:	1f 91       	pop	r17
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	0e 94 41 07 	call	0xe82	; 0xe82 <__addsf3x>
    1538:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__fp_round>

0000153c <modf>:
    153c:	fa 01       	movw	r30, r20
    153e:	dc 01       	movw	r26, r24
    1540:	aa 0f       	add	r26, r26
    1542:	bb 1f       	adc	r27, r27
    1544:	9b 01       	movw	r18, r22
    1546:	ac 01       	movw	r20, r24
    1548:	bf 57       	subi	r27, 0x7F	; 127
    154a:	28 f4       	brcc	.+10     	; 0x1556 <modf+0x1a>
    154c:	22 27       	eor	r18, r18
    154e:	33 27       	eor	r19, r19
    1550:	44 27       	eor	r20, r20
    1552:	50 78       	andi	r21, 0x80	; 128
    1554:	20 c0       	rjmp	.+64     	; 0x1596 <modf+0x5a>
    1556:	b7 51       	subi	r27, 0x17	; 23
    1558:	90 f4       	brcc	.+36     	; 0x157e <modf+0x42>
    155a:	ab 2f       	mov	r26, r27
    155c:	00 24       	eor	r0, r0
    155e:	46 95       	lsr	r20
    1560:	37 95       	ror	r19
    1562:	27 95       	ror	r18
    1564:	01 1c       	adc	r0, r1
    1566:	a3 95       	inc	r26
    1568:	d2 f3       	brmi	.-12     	; 0x155e <modf+0x22>
    156a:	00 20       	and	r0, r0
    156c:	71 f0       	breq	.+28     	; 0x158a <modf+0x4e>
    156e:	22 0f       	add	r18, r18
    1570:	33 1f       	adc	r19, r19
    1572:	44 1f       	adc	r20, r20
    1574:	b3 95       	inc	r27
    1576:	da f3       	brmi	.-10     	; 0x156e <modf+0x32>
    1578:	0e d0       	rcall	.+28     	; 0x1596 <modf+0x5a>
    157a:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__subsf3>
    157e:	61 30       	cpi	r22, 0x01	; 1
    1580:	71 05       	cpc	r23, r1
    1582:	a0 e8       	ldi	r26, 0x80	; 128
    1584:	8a 07       	cpc	r24, r26
    1586:	b9 46       	sbci	r27, 0x69	; 105
    1588:	30 f4       	brcc	.+12     	; 0x1596 <modf+0x5a>
    158a:	9b 01       	movw	r18, r22
    158c:	ac 01       	movw	r20, r24
    158e:	66 27       	eor	r22, r22
    1590:	77 27       	eor	r23, r23
    1592:	88 27       	eor	r24, r24
    1594:	90 78       	andi	r25, 0x80	; 128
    1596:	30 96       	adiw	r30, 0x00	; 0
    1598:	21 f0       	breq	.+8      	; 0x15a2 <modf+0x66>
    159a:	20 83       	st	Z, r18
    159c:	31 83       	std	Z+1, r19	; 0x01
    159e:	42 83       	std	Z+2, r20	; 0x02
    15a0:	53 83       	std	Z+3, r21	; 0x03
    15a2:	08 95       	ret

000015a4 <__fp_mpack>:
    15a4:	9f 3f       	cpi	r25, 0xFF	; 255
    15a6:	31 f0       	breq	.+12     	; 0x15b4 <__fp_mpack_finite+0xc>

000015a8 <__fp_mpack_finite>:
    15a8:	91 50       	subi	r25, 0x01	; 1
    15aa:	20 f4       	brcc	.+8      	; 0x15b4 <__fp_mpack_finite+0xc>
    15ac:	87 95       	ror	r24
    15ae:	77 95       	ror	r23
    15b0:	67 95       	ror	r22
    15b2:	b7 95       	ror	r27
    15b4:	88 0f       	add	r24, r24
    15b6:	91 1d       	adc	r25, r1
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	97 f9       	bld	r25, 7
    15be:	08 95       	ret

000015c0 <__tablejump2__>:
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	05 90       	lpm	r0, Z+
    15c6:	f4 91       	lpm	r31, Z
    15c8:	e0 2d       	mov	r30, r0
    15ca:	09 94       	ijmp

000015cc <__itoa_ncheck>:
    15cc:	bb 27       	eor	r27, r27
    15ce:	4a 30       	cpi	r20, 0x0A	; 10
    15d0:	31 f4       	brne	.+12     	; 0x15de <__itoa_ncheck+0x12>
    15d2:	99 23       	and	r25, r25
    15d4:	22 f4       	brpl	.+8      	; 0x15de <__itoa_ncheck+0x12>
    15d6:	bd e2       	ldi	r27, 0x2D	; 45
    15d8:	90 95       	com	r25
    15da:	81 95       	neg	r24
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__utoa_common>

000015e2 <__utoa_ncheck>:
    15e2:	bb 27       	eor	r27, r27

000015e4 <__utoa_common>:
    15e4:	fb 01       	movw	r30, r22
    15e6:	55 27       	eor	r21, r21
    15e8:	aa 27       	eor	r26, r26
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	aa 1f       	adc	r26, r26
    15f0:	a4 17       	cp	r26, r20
    15f2:	10 f0       	brcs	.+4      	; 0x15f8 <__utoa_common+0x14>
    15f4:	a4 1b       	sub	r26, r20
    15f6:	83 95       	inc	r24
    15f8:	50 51       	subi	r21, 0x10	; 16
    15fa:	b9 f7       	brne	.-18     	; 0x15ea <__utoa_common+0x6>
    15fc:	a0 5d       	subi	r26, 0xD0	; 208
    15fe:	aa 33       	cpi	r26, 0x3A	; 58
    1600:	08 f0       	brcs	.+2      	; 0x1604 <__utoa_common+0x20>
    1602:	a9 5d       	subi	r26, 0xD9	; 217
    1604:	a1 93       	st	Z+, r26
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	79 f7       	brne	.-34     	; 0x15e8 <__utoa_common+0x4>
    160a:	b1 11       	cpse	r27, r1
    160c:	b1 93       	st	Z+, r27
    160e:	11 92       	st	Z+, r1
    1610:	cb 01       	movw	r24, r22
    1612:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <strrev>

00001616 <strrev>:
    1616:	dc 01       	movw	r26, r24
    1618:	fc 01       	movw	r30, r24
    161a:	67 2f       	mov	r22, r23
    161c:	71 91       	ld	r23, Z+
    161e:	77 23       	and	r23, r23
    1620:	e1 f7       	brne	.-8      	; 0x161a <strrev+0x4>
    1622:	32 97       	sbiw	r30, 0x02	; 2
    1624:	04 c0       	rjmp	.+8      	; 0x162e <strrev+0x18>
    1626:	7c 91       	ld	r23, X
    1628:	6d 93       	st	X+, r22
    162a:	70 83       	st	Z, r23
    162c:	62 91       	ld	r22, -Z
    162e:	ae 17       	cp	r26, r30
    1630:	bf 07       	cpc	r27, r31
    1632:	c8 f3       	brcs	.-14     	; 0x1626 <strrev+0x10>
    1634:	08 95       	ret

00001636 <eeprom_read_byte>:
    1636:	f9 99       	sbic	0x1f, 1	; 31
    1638:	fe cf       	rjmp	.-4      	; 0x1636 <eeprom_read_byte>
    163a:	92 bd       	out	0x22, r25	; 34
    163c:	81 bd       	out	0x21, r24	; 33
    163e:	f8 9a       	sbi	0x1f, 0	; 31
    1640:	99 27       	eor	r25, r25
    1642:	80 b5       	in	r24, 0x20	; 32
    1644:	08 95       	ret

00001646 <eeprom_update_block>:
    1646:	dc 01       	movw	r26, r24
    1648:	a4 0f       	add	r26, r20
    164a:	b5 1f       	adc	r27, r21
    164c:	41 50       	subi	r20, 0x01	; 1
    164e:	50 40       	sbci	r21, 0x00	; 0
    1650:	48 f0       	brcs	.+18     	; 0x1664 <eeprom_update_block+0x1e>
    1652:	cb 01       	movw	r24, r22
    1654:	84 0f       	add	r24, r20
    1656:	95 1f       	adc	r25, r21
    1658:	2e 91       	ld	r18, -X
    165a:	0e 94 34 0b 	call	0x1668	; 0x1668 <eeprom_update_r18>
    165e:	41 50       	subi	r20, 0x01	; 1
    1660:	50 40       	sbci	r21, 0x00	; 0
    1662:	d0 f7       	brcc	.-12     	; 0x1658 <eeprom_update_block+0x12>
    1664:	08 95       	ret

00001666 <eeprom_update_byte>:
    1666:	26 2f       	mov	r18, r22

00001668 <eeprom_update_r18>:
    1668:	f9 99       	sbic	0x1f, 1	; 31
    166a:	fe cf       	rjmp	.-4      	; 0x1668 <eeprom_update_r18>
    166c:	92 bd       	out	0x22, r25	; 34
    166e:	81 bd       	out	0x21, r24	; 33
    1670:	f8 9a       	sbi	0x1f, 0	; 31
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	00 b4       	in	r0, 0x20	; 32
    1676:	02 16       	cp	r0, r18
    1678:	39 f0       	breq	.+14     	; 0x1688 <eeprom_update_r18+0x20>
    167a:	1f ba       	out	0x1f, r1	; 31
    167c:	20 bd       	out	0x20, r18	; 32
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	fa 9a       	sbi	0x1f, 2	; 31
    1684:	f9 9a       	sbi	0x1f, 1	; 31
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	08 95       	ret

0000168a <_exit>:
    168a:	f8 94       	cli

0000168c <__stop_program>:
    168c:	ff cf       	rjmp	.-2      	; 0x168c <__stop_program>
